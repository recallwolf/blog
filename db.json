{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534138760511},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1534138760521},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1534138760520},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1534138760524},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1534138760525},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1534138760525},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1534138760527},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1534138760526},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1534138760526},{"_id":"themes/next/_config.yml","hash":"d73c3362d667f38b9b5f90074b7a293a1fa02c55","modified":1534138760529},{"_id":"themes/next/README.md","hash":"4e276fb9a3c31f1259df3ea9a4b92f4a8d72714d","modified":1534138760528},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1534138760521},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1534138760524},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1534138760568},{"_id":"themes/next/README.cn.md","hash":"b764aae78ffa561a9a68fdee4c6f21c3ce260fbb","modified":1534138760527},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1534138760530},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1534138760529},{"_id":"source/_posts/js中异步，同步，回调函数和Promise.md","hash":"13d4ebcfdb527bdfb30880b64fadb2f8ae42fd6b","modified":1544077983194},{"_id":"source/_posts/js的原型链.md","hash":"89110e55528907ee2558b3a6c770fa0fd63ac8d2","modified":1544077987965},{"_id":"source/_posts/nodejs和树莓派小车.md","hash":"4118cb6e50ee2a99f50a75f74b3eb7b992bdfba3","modified":1544108597512},{"_id":"source/_posts/js的this指向.md","hash":"0e29c21a1cb494d5a8b027f922c79be7e308f790","modified":1544077984927},{"_id":"source/_posts/js闭包.md","hash":"6bf8479a60d676306ee4add9a47eeda4b2c427a1","modified":1544260807058},{"_id":"source/_posts/vue结合express后台开发.md","hash":"cef2fc3c07fb3e434f036bae90011cd05b6b8a74","modified":1544077993025},{"_id":"source/_posts/vue与react组件对比.md","hash":"5baa6ccad7f896713300d7208df63af557ffa15e","modified":1544077991461},{"_id":"source/_posts/数组随机排列.md","hash":"7c48d00705e710ba90d70bf5cfad7cf944befd37","modified":1544077998601},{"_id":"source/_posts/网站部署.md","hash":"697308cd3f09ddab09d407c35bb579bbf63b3117","modified":1534138760519},{"_id":"source/_posts/常用css布局.md","hash":"acdb1415861820e5ad03735f903f765df0f9796c","modified":1544077996896},{"_id":"source/categories/index.md","hash":"b7ce1ac02e7da437558b452fd0b13597e291e5de","modified":1534138760519},{"_id":"source/tags/index.md","hash":"62f8732bfe34cbfa44d3fbb1461b471148f3b2d0","modified":1534138760520},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1534138760568},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1534138760792},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1534138760522},{"_id":"source/_posts/个人总结.md","hash":"aa0ca27e85f41699572772c7fb5ff00b78ff8aa1","modified":1544078001559},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1534138760523},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1534138760522},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1534138760793},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1534138760792},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1534138760538},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1534138760524},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1534138760566},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1534138760566},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1534138760567},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1534138760567},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1534138760567},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1534138760566},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1534138760568},{"_id":"themes/next/source/404.html","hash":"e97a995533c7d35611a638539a8e013b41fca24f","modified":1534089408611},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1534138760531},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1534138760530},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1534138760531},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1534138760532},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1534138760533},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1534138760532},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1534138760533},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1534138760534},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1534138760535},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1534138760535},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1534138760536},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1534138760536},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1534138760535},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1534138760536},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1534138760534},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1534138760534},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1534138760569},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534089408779},{"_id":"source/_posts/js中异步，同步，回调函数和Promise/2.png","hash":"6b8ccdbf6f8bc1405d432e814cdef456162a7341","modified":1543742295721},{"_id":"source/_posts/js中异步，同步，回调函数和Promise/1.png","hash":"9c74bec4b480a1e6d8d88465cbd575726de4cfab","modified":1543742246084},{"_id":"source/_posts/js的原型链/图1.png","hash":"9858467751be82a4fb58ab8ca6f4b982d5b32731","modified":1534138760514},{"_id":"source/_posts/js的原型链/选区1.png","hash":"d7260d994f5cea8eddf7e902d7c92597277c2732","modified":1534138760516},{"_id":"source/_posts/js的原型链/选区2.png","hash":"f7220c10301f9e24afc19d288a30c6783c2eb682","modified":1534138760517},{"_id":"source/_posts/常用css布局/grail.png","hash":"d1a7098c2fd457544c63c418e9e08a2a8ee8869e","modified":1537278410430},{"_id":"source/_posts/常用css布局/triangle.png","hash":"b0ffd421cff2cac7976ee106199497cb426c79a7","modified":1537271130456},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1534138760570},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1534138760570},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1534138760570},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1534138760571},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1534138760572},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1534138760571},{"_id":"source/_posts/常用css布局/wings.png","hash":"51dcf9341992d066b0cc9b2067fa9450a8d4bfe8","modified":1537279055795},{"_id":"source/_posts/vue与react组件对比/vue.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1534162853175},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1534138760572},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1534138760572},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1534138760572},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1534138760538},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1534138760539},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1534138760539},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1534138760541},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1534138760538},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1534138760540},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1534138760541},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1534138760544},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1534138760544},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1534138760540},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1534138760543},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1534138760542},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1534138760545},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1534138760549},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1534138760544},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1534138760549},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1534138760552},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1534138760542},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1534089408779},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1534089408796},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534089408781},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534089408781},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1534089408797},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1534089408796},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1534089408797},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534089408799},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534089408800},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1534089408780},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534089408799},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534089408801},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1534089408798},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1534089408799},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1534089408800},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1534089408801},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1534089408801},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1534089408798},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534089408802},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1534138760561},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1534138760561},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1534138760563},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1534138760561},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1534138760562},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1534138760562},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1534138760562},{"_id":"source/_posts/nodejs和树莓派小车/terminal.png","hash":"599dbb9ecf837fc39d85c32d87ace3ff043f1345","modified":1544106235453},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534138760551},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534138760551},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534089408678},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534089408680},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534089408678},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534089408729},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534089408715},{"_id":"source/_posts/js的原型链/图2.png","hash":"fec792479bb20ccfc40b5eef2ff69e7be2afa04e","modified":1534138760516},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1534138760545},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1534138760546},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1534138760545},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1534138760543},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1534138760550},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1534089408677},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1534138760543},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1534138760547},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1534138760547},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1534138760546},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1534138760547},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1534138760551},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1534138760550},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1534089408803},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1534089408804},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1534089408804},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1534089408806},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1534089408803},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1534089408807},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1534089408806},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1534089408678},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1534089408679},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1534089408808},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1534089408714},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1534089408809},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1534089408714},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1534089408728},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1534089408679},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a82bbe643f8c89a4fb123b538d164e5e4b5f2719","modified":1534142290305},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1534089408809},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1534089408810},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1534138760557},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1534138760558},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1534138760559},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1534138760560},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1534138760559},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1534138760559},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1534138760565},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1534138760560},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1534138760564},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1534138760558},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1534138760553},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1534138760565},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1534138760553},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1534138760554},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1534138760553},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1534138760555},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1534138760554},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1534138760554},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1534138760556},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1534138760556},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1534138760556},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1534138760557},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1534138760555},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1534138760560},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1534138760555},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1534089408851},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1534089408856},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1534089408857},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1534089408909},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1534089408915},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1534138760564},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1534089408915},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1534089408887},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1534089408889},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1534089408888},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1534089408888},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1534089408891},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1534089408892},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1534089408892},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1534089408893},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1534089408891},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1534089408919},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1534089408920},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1534089408920},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1534089408921},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1534089408923},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1534089408921},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1534089408923},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1534089408922},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1534089408923},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1534089408925},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1534089408924},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1534089408922},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1534089408925},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1534089408928},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1534089408926},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1534089408928},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1534089408927},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1534089408925},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1534089408935},{"_id":"source/_posts/vue与react组件对比/react.png","hash":"c03ecdf63652b3c2f516433c295763b6bc7ac404","modified":1534166331155},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1534089408936},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1534089408939},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1534089408940},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1534089408911},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1534089408912},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1534089408941},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1534089408913},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1534089408912},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1534089408914},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1534089408913},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1534089408910},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1534089408681},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1534089408614},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1534089408613},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1534089408614},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1534089408613},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1534089408612},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1534089408673},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1534089408623},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1534089408636},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1534089408700},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1534089408713},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1534089408712},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1534089408687},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1534089408688},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1534089408688},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1534089408698},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1534089408701},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1534089408713},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1534089408698},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1534089408681},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1534089408700},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1534089408682},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1534089408808},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1534089408682},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1534089408684},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1534089408684},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1534089408685},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1534089408684},{"_id":"source/_posts/nodejs和树莓派小车/index.png","hash":"9df4495719b2f046542ed7266a4ad57d26191d6c","modified":1544104377989},{"_id":"source/_posts/nodejs和树莓派小车/pi0.jpg","hash":"e8841e0cba04b22658784c7ed094ed6fec2fe74b","modified":1544077539146},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1534138760564},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1534089408675},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1534089408676},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1534089408676},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1534089408674},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1534089408674},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1534089408934},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1534089408934},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1534089408890},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1534089408675},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1534089408890},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1534138760563},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1534089408819},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1534089408851},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1534089408821},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534089408859},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534089408860},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534089408881},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534089408860},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534089408880},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1534089408886},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1534089408885},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1534089408894},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1534089408894},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534089408881},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1534089408895},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1534089408886},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1534089408820},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1534089408908},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1534089408616},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1534089408615},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1534089408616},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1534089408618},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1534089408624},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1534089408626},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1534089408628},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1534089408626},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1534089408628},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1534089408627},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1534089408629},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1534089408629},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1534089408617},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1534089408617},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1534089408629},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1534089408630},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1534089408624},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1534089408621},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1534089408630},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1534089408631},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1534089408618},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1534089408619},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1534089408622},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1534089408621},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1534089408621},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1534089408699},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1534089408632},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1534089408620},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1534089408633},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1534089408633},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1534089408631},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1534089408632},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1534089408633},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1534089408634},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1534089408634},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1534089408635},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1534089408686},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1534089408668},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1534089408686},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1534089408635},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1534089408668},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1534089408669},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1534089408670},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1534089408670},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1534089408667},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1534089408625},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1534089408671},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1534089408671},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1534089408672},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1534089408622},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1534089408665},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1534089408669},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1534089408637},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1534089408637},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1534089408666},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1534089408635},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1534089408636},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1534089408667},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1534089408897},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1534089408938},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1534089408664},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1534089408666},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1534089408812},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1534089408811},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1534089408818},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1534089408812},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534089408882},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1534089408665},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1534089408884},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1534089408883},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1534089408885},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1534089408884},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1534089408907},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1534089408906},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1534089408900},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1534089408883},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1534089408818},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1534089408855},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1534089408904},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1534089408932},{"_id":"source/_posts/nodejs和树莓派小车/sketch.jpg","hash":"9234eb3bea02d3a851f204f7ca7fac00452ed6f3","modified":1544019050255},{"_id":"source/_posts/nodejs和树莓派小车/car.jpg","hash":"3df9bdc65c63f86fa8975d69330970ee20ae99c6","modified":1544105066364}],"Category":[{"name":"JavaScript","_id":"cjpf91v2n00030iv1vr972ibq"},{"name":"RaspberryPi","_id":"cjpf91v2r00060iv1oglnd0iv"},{"name":"vue","_id":"cjpf91v4s000r0iv1k5o6a2ts"},{"name":"Ubuntu","_id":"cjpf91v4z000z0iv1qcq02o7i"},{"name":"CSS","_id":"cjpf91v5100140iv1x84qa25f"},{"name":"Others","_id":"cjpf91vk9001g0iv1jgyzeo77"}],"Data":[],"Page":[{"_content":"","source":"404.html","raw":"","date":"2018-12-04T15:07:55.974Z","updated":"2018-08-13T05:39:20.511Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjpf91oc800000iv1z15m3eyv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-03-17T14:12:53.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-03-17 22:12:53\ntype: \"categories\"\n---\n","updated":"2018-08-13T05:39:20.519Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjpf91v42000j0iv1dhd8itnl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-03-17T14:16:01.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-03-17 22:16:01\ntype: \"tags\"\n---\n","updated":"2018-08-13T05:39:20.520Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjpf91v44000l0iv16ly2ey9f","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS中异步，同步，回调函数和Promise","date":"2018-12-01T04:05:16.000Z","description":"Event Loop, 异步","_content":"### 1.线程，同步，异步和回调函数\n\n#### 线程\n>JS单线程，是指在JS引擎中负责解释和执行JavaScript代码的线程只有一个,即主线程。  \n实际上还存在其他的线程。例如：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程(例如在Node.js中)等等。这些线程可能存在于JS引擎之内，也可能存在于JS引擎之外。\n\n**Javascript 有一个 main thread 主线程和 call-stack 调用栈(执行栈)，所有的任务都会被放到调用栈等待主线程执行。**\n\n**并且一个 JavaScript 运行时包含了一个待处理的消息队列。每一个消息都有一个为了处理这个消息相关联的函数。**\n\n#### Event Loop\n\n1.函数调用形成了一个栈帧\n    \n    function foo(b) {\n      var a = 10;\n      return a + b + 11;\n    }\n\n    function bar(x) {\n      var y = 3;\n      return foo(x * y);\n    }\n\n    console.log(bar(7));  \n\n>当调用bar时，创建了第一个帧 ，帧中包含了bar的参数和局部变量。当bar调用foo时，第二个帧就被创建，并被压到第一个帧之上，帧中包含了foo的参数和局部变量。当foo返回时，最上层的帧就被弹出栈（剩下bar函数的调用帧 ）。当bar返回的时候，栈就空了。\n\n2.消息队列  \n\n>在事件循环期间的某个时刻，运行时总是从最先进入队列的一个消息开始处理队列中的消息。正因如此，这个消息就会被移出队列，并将其作为输入参数调用与之关联的函数。为了使用这个函数，调用一个函数总是会为其创造一个新的栈帧，一如既往。\n\n**当异步线程执行完并且有了结果，会往消息队列推送该结果。**  \n**当主线程执行完调用栈里的任务，即调用栈为空时，会读取消息队列,并将其作为输入参数调用与之关联的函数。即添加到可执行栈中。**\n\n以上机制就叫做事件循环机制，取一个消息并执行的过程叫做一次循环。\n\n{% asset_img 1.png %}\n\n\n剩下的概念就很好理解了：  \n同步：如果在函数返回结果的时候，调用者能够拿到预期的结果，即同步。\n\n异步：如果在函数返回的时候，调用者还不能购得到预期结果，而是将来通过一定的手段得到（例如回调函数），这就是异步。\n\n回调函数：如上文说道，每一个消息都有一个为了处理这个消息相关联的函数。该函数即为回调函数。\n\n>主线程在执行完当前循环中的所有代码后，就会到消息队列取出这条消息，并执行它。到此为止，就完成了工作线程对主线程的通知，回调函数也就得到了执行。\n\n{% asset_img 2.png %}\n\n    console.log(\"a\");\n    setTimeout(function() {\n      console.log(\"b\");\n    }, 1000);\n    setTimeout(function() {\n      console.log(\"c\");\n    }, 0);\n    console.log(\"d\");\n\n以上代码执行结果是a d c b\n\n### 2.Promise与回调地狱\n\n#### 回调地狱  \n\n    listen( \"click\", function handler(evt){\n      setTimeout( function request(){\n        ajax( \"http://some.url.1\", function response(text){\n          if (text == \"hello\") {\n            handler();\n          }\n          else if (text == \"world\") {\n            request();\n          }\n        } );\n      }, 500) ;\n    } );\n\n当多个回调函数嵌套就构成了回调地狱。除了缩进产生的横向扩展导致代码的阅读难度，此外还有执行顺序上的问题。  \n上面例子的执行顺序 **监听click事件 => setTimeout => ajax => if判断**，是直观逻辑上的顺序，但是在真实的异步JS程序中，经常会有很多噪音把事情搞乱。\n\n比如\n\n    doA( function(){\n      doB();\n\n      doC( function(){\n        doD();\n      } )\n\n      doE();\n    } );\n\n    doF();\n\n这段代码执行顺序： **doA => doF => doB => doC => doE => doE => doD**\n这很不符合直观上的逻辑\n\n当这样的回调嵌套出现很多的时候，代码可读性大大降低。\n\n#### Promise\n\nPromise就是为了解决回调地狱而产生的，Promise 本质上是一个绑定了回调的对象，而不是将回调传进函数内部。\n\nPromise 对象有以下两个特点： \n>（1）对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n\n>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\nPromise基本用法\n\n    const promise = new Promise(function(resolve, reject) {\n      // ... some code\n\n      if (/* 异步操作成功 */){\n        resolve(value);\n      } else {\n        reject(error);\n      }\n    });\n    \n\n举个例子\n\n    setTimeout(function() {\n        console.log(\"log1\");\n        setTimeout(function() {\n            console.log(\"log2\");\n            setTimeout(function() {\n                console.log(\"log3\");\n            }, 3000);\n        }, 2000); \n    }, 1000);\n\n经过Promise封装后\n\n    function firtTimeout() {\n      return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n          resolve(\"log1\");\n        }, 1000);\n      })\n    }\n\n    function secondTimeout(result) {\n      console.log(result);\n      return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n          (\"log2\");\n        }, 2000);\n      })\n    }\n\n    function ThirdTimeout(result) {\n      console.log(result);\n      return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n          resolve(\"log3\");\n        }, 3000);\n      })\n    }\n\n    firtTimeout()\n    .then(secondTimeout)\n    .then(ThirdTimeout)\n    .then(function(result) {\n      console.log(result)\n    })\n    \n\n\n>参考资料 ：   \n[阮一峰《ECMAScript6入门》](http://es6.ruanyifeng.com/#docs/promise)  \n[MDN web docs 使用Promises\n](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)   \n[MDN web docs 并发模型与事件循环\n](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)  \n[getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/README.md)\n","source":"_posts/js中异步，同步，回调函数和Promise.md","raw":"---\ntitle: JS中异步，同步，回调函数和Promise\ndate: 2018-12-01 12:05:16\ntags: JavaScript\ncategories: JavaScript\ndescription: Event Loop, 异步\n---\n### 1.线程，同步，异步和回调函数\n\n#### 线程\n>JS单线程，是指在JS引擎中负责解释和执行JavaScript代码的线程只有一个,即主线程。  \n实际上还存在其他的线程。例如：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程(例如在Node.js中)等等。这些线程可能存在于JS引擎之内，也可能存在于JS引擎之外。\n\n**Javascript 有一个 main thread 主线程和 call-stack 调用栈(执行栈)，所有的任务都会被放到调用栈等待主线程执行。**\n\n**并且一个 JavaScript 运行时包含了一个待处理的消息队列。每一个消息都有一个为了处理这个消息相关联的函数。**\n\n#### Event Loop\n\n1.函数调用形成了一个栈帧\n    \n    function foo(b) {\n      var a = 10;\n      return a + b + 11;\n    }\n\n    function bar(x) {\n      var y = 3;\n      return foo(x * y);\n    }\n\n    console.log(bar(7));  \n\n>当调用bar时，创建了第一个帧 ，帧中包含了bar的参数和局部变量。当bar调用foo时，第二个帧就被创建，并被压到第一个帧之上，帧中包含了foo的参数和局部变量。当foo返回时，最上层的帧就被弹出栈（剩下bar函数的调用帧 ）。当bar返回的时候，栈就空了。\n\n2.消息队列  \n\n>在事件循环期间的某个时刻，运行时总是从最先进入队列的一个消息开始处理队列中的消息。正因如此，这个消息就会被移出队列，并将其作为输入参数调用与之关联的函数。为了使用这个函数，调用一个函数总是会为其创造一个新的栈帧，一如既往。\n\n**当异步线程执行完并且有了结果，会往消息队列推送该结果。**  \n**当主线程执行完调用栈里的任务，即调用栈为空时，会读取消息队列,并将其作为输入参数调用与之关联的函数。即添加到可执行栈中。**\n\n以上机制就叫做事件循环机制，取一个消息并执行的过程叫做一次循环。\n\n{% asset_img 1.png %}\n\n\n剩下的概念就很好理解了：  \n同步：如果在函数返回结果的时候，调用者能够拿到预期的结果，即同步。\n\n异步：如果在函数返回的时候，调用者还不能购得到预期结果，而是将来通过一定的手段得到（例如回调函数），这就是异步。\n\n回调函数：如上文说道，每一个消息都有一个为了处理这个消息相关联的函数。该函数即为回调函数。\n\n>主线程在执行完当前循环中的所有代码后，就会到消息队列取出这条消息，并执行它。到此为止，就完成了工作线程对主线程的通知，回调函数也就得到了执行。\n\n{% asset_img 2.png %}\n\n    console.log(\"a\");\n    setTimeout(function() {\n      console.log(\"b\");\n    }, 1000);\n    setTimeout(function() {\n      console.log(\"c\");\n    }, 0);\n    console.log(\"d\");\n\n以上代码执行结果是a d c b\n\n### 2.Promise与回调地狱\n\n#### 回调地狱  \n\n    listen( \"click\", function handler(evt){\n      setTimeout( function request(){\n        ajax( \"http://some.url.1\", function response(text){\n          if (text == \"hello\") {\n            handler();\n          }\n          else if (text == \"world\") {\n            request();\n          }\n        } );\n      }, 500) ;\n    } );\n\n当多个回调函数嵌套就构成了回调地狱。除了缩进产生的横向扩展导致代码的阅读难度，此外还有执行顺序上的问题。  \n上面例子的执行顺序 **监听click事件 => setTimeout => ajax => if判断**，是直观逻辑上的顺序，但是在真实的异步JS程序中，经常会有很多噪音把事情搞乱。\n\n比如\n\n    doA( function(){\n      doB();\n\n      doC( function(){\n        doD();\n      } )\n\n      doE();\n    } );\n\n    doF();\n\n这段代码执行顺序： **doA => doF => doB => doC => doE => doE => doD**\n这很不符合直观上的逻辑\n\n当这样的回调嵌套出现很多的时候，代码可读性大大降低。\n\n#### Promise\n\nPromise就是为了解决回调地狱而产生的，Promise 本质上是一个绑定了回调的对象，而不是将回调传进函数内部。\n\nPromise 对象有以下两个特点： \n>（1）对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n\n>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\nPromise基本用法\n\n    const promise = new Promise(function(resolve, reject) {\n      // ... some code\n\n      if (/* 异步操作成功 */){\n        resolve(value);\n      } else {\n        reject(error);\n      }\n    });\n    \n\n举个例子\n\n    setTimeout(function() {\n        console.log(\"log1\");\n        setTimeout(function() {\n            console.log(\"log2\");\n            setTimeout(function() {\n                console.log(\"log3\");\n            }, 3000);\n        }, 2000); \n    }, 1000);\n\n经过Promise封装后\n\n    function firtTimeout() {\n      return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n          resolve(\"log1\");\n        }, 1000);\n      })\n    }\n\n    function secondTimeout(result) {\n      console.log(result);\n      return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n          (\"log2\");\n        }, 2000);\n      })\n    }\n\n    function ThirdTimeout(result) {\n      console.log(result);\n      return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n          resolve(\"log3\");\n        }, 3000);\n      })\n    }\n\n    firtTimeout()\n    .then(secondTimeout)\n    .then(ThirdTimeout)\n    .then(function(result) {\n      console.log(result)\n    })\n    \n\n\n>参考资料 ：   \n[阮一峰《ECMAScript6入门》](http://es6.ruanyifeng.com/#docs/promise)  \n[MDN web docs 使用Promises\n](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)   \n[MDN web docs 并发模型与事件循环\n](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)  \n[getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/README.md)\n","slug":"js中异步，同步，回调函数和Promise","published":1,"updated":"2018-12-06T06:33:03.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpf91v2200010iv1qmb4whcg","content":"<h3 id=\"1-线程，同步，异步和回调函数\"><a href=\"#1-线程，同步，异步和回调函数\" class=\"headerlink\" title=\"1.线程，同步，异步和回调函数\"></a>1.线程，同步，异步和回调函数</h3><h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><blockquote>\n<p>JS单线程，是指在JS引擎中负责解释和执行JavaScript代码的线程只有一个,即主线程。<br>实际上还存在其他的线程。例如：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程(例如在Node.js中)等等。这些线程可能存在于JS引擎之内，也可能存在于JS引擎之外。</p>\n</blockquote>\n<p><strong>Javascript 有一个 main thread 主线程和 call-stack 调用栈(执行栈)，所有的任务都会被放到调用栈等待主线程执行。</strong></p>\n<p><strong>并且一个 JavaScript 运行时包含了一个待处理的消息队列。每一个消息都有一个为了处理这个消息相关联的函数。</strong></p>\n<h4 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h4><p>1.函数调用形成了一个栈帧</p>\n<pre><code>function foo(b) {\n  var a = 10;\n  return a + b + 11;\n}\n\nfunction bar(x) {\n  var y = 3;\n  return foo(x * y);\n}\n\nconsole.log(bar(7));  \n</code></pre><blockquote>\n<p>当调用bar时，创建了第一个帧 ，帧中包含了bar的参数和局部变量。当bar调用foo时，第二个帧就被创建，并被压到第一个帧之上，帧中包含了foo的参数和局部变量。当foo返回时，最上层的帧就被弹出栈（剩下bar函数的调用帧 ）。当bar返回的时候，栈就空了。</p>\n</blockquote>\n<p>2.消息队列  </p>\n<blockquote>\n<p>在事件循环期间的某个时刻，运行时总是从最先进入队列的一个消息开始处理队列中的消息。正因如此，这个消息就会被移出队列，并将其作为输入参数调用与之关联的函数。为了使用这个函数，调用一个函数总是会为其创造一个新的栈帧，一如既往。</p>\n</blockquote>\n<p><strong>当异步线程执行完并且有了结果，会往消息队列推送该结果。</strong><br><strong>当主线程执行完调用栈里的任务，即调用栈为空时，会读取消息队列,并将其作为输入参数调用与之关联的函数。即添加到可执行栈中。</strong></p>\n<p>以上机制就叫做事件循环机制，取一个消息并执行的过程叫做一次循环。</p>\n<img src=\"/blog/2018/12/01/js中异步，同步，回调函数和Promise/1.png\">\n<p>剩下的概念就很好理解了：<br>同步：如果在函数返回结果的时候，调用者能够拿到预期的结果，即同步。</p>\n<p>异步：如果在函数返回的时候，调用者还不能购得到预期结果，而是将来通过一定的手段得到（例如回调函数），这就是异步。</p>\n<p>回调函数：如上文说道，每一个消息都有一个为了处理这个消息相关联的函数。该函数即为回调函数。</p>\n<blockquote>\n<p>主线程在执行完当前循环中的所有代码后，就会到消息队列取出这条消息，并执行它。到此为止，就完成了工作线程对主线程的通知，回调函数也就得到了执行。</p>\n</blockquote>\n<img src=\"/blog/2018/12/01/js中异步，同步，回调函数和Promise/2.png\">\n<pre><code>console.log(&quot;a&quot;);\nsetTimeout(function() {\n  console.log(&quot;b&quot;);\n}, 1000);\nsetTimeout(function() {\n  console.log(&quot;c&quot;);\n}, 0);\nconsole.log(&quot;d&quot;);\n</code></pre><p>以上代码执行结果是a d c b</p>\n<h3 id=\"2-Promise与回调地狱\"><a href=\"#2-Promise与回调地狱\" class=\"headerlink\" title=\"2.Promise与回调地狱\"></a>2.Promise与回调地狱</h3><h4 id=\"回调地狱\"><a href=\"#回调地狱\" class=\"headerlink\" title=\"回调地狱\"></a>回调地狱</h4><pre><code>listen( &quot;click&quot;, function handler(evt){\n  setTimeout( function request(){\n    ajax( &quot;http://some.url.1&quot;, function response(text){\n      if (text == &quot;hello&quot;) {\n        handler();\n      }\n      else if (text == &quot;world&quot;) {\n        request();\n      }\n    } );\n  }, 500) ;\n} );\n</code></pre><p>当多个回调函数嵌套就构成了回调地狱。除了缩进产生的横向扩展导致代码的阅读难度，此外还有执行顺序上的问题。<br>上面例子的执行顺序 <strong>监听click事件 =&gt; setTimeout =&gt; ajax =&gt; if判断</strong>，是直观逻辑上的顺序，但是在真实的异步JS程序中，经常会有很多噪音把事情搞乱。</p>\n<p>比如</p>\n<pre><code>doA( function(){\n  doB();\n\n  doC( function(){\n    doD();\n  } )\n\n  doE();\n} );\n\ndoF();\n</code></pre><p>这段代码执行顺序： <strong>doA =&gt; doF =&gt; doB =&gt; doC =&gt; doE =&gt; doE =&gt; doD</strong><br>这很不符合直观上的逻辑</p>\n<p>当这样的回调嵌套出现很多的时候，代码可读性大大降低。</p>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>Promise就是为了解决回调地狱而产生的，Promise 本质上是一个绑定了回调的对象，而不是将回调传进函数内部。</p>\n<p>Promise 对象有以下两个特点： </p>\n<blockquote>\n<p>（1）对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n</blockquote>\n<blockquote>\n<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n</blockquote>\n<p>Promise基本用法</p>\n<pre><code>const promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n</code></pre><p>举个例子</p>\n<pre><code>setTimeout(function() {\n    console.log(&quot;log1&quot;);\n    setTimeout(function() {\n        console.log(&quot;log2&quot;);\n        setTimeout(function() {\n            console.log(&quot;log3&quot;);\n        }, 3000);\n    }, 2000); \n}, 1000);\n</code></pre><p>经过Promise封装后</p>\n<pre><code>function firtTimeout() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      resolve(&quot;log1&quot;);\n    }, 1000);\n  })\n}\n\nfunction secondTimeout(result) {\n  console.log(result);\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      (&quot;log2&quot;);\n    }, 2000);\n  })\n}\n\nfunction ThirdTimeout(result) {\n  console.log(result);\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      resolve(&quot;log3&quot;);\n    }, 3000);\n  })\n}\n\nfirtTimeout()\n.then(secondTimeout)\n.then(ThirdTimeout)\n.then(function(result) {\n  console.log(result)\n})\n</code></pre><blockquote>\n<p>参考资料 ：<br><a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">阮一峰《ECMAScript6入门》</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\" target=\"_blank\" rel=\"noopener\">MDN web docs 使用Promises\n</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">MDN web docs 并发模型与事件循环\n</a><br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/README.md\" target=\"_blank\" rel=\"noopener\">getify/You-Dont-Know-JS</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-线程，同步，异步和回调函数\"><a href=\"#1-线程，同步，异步和回调函数\" class=\"headerlink\" title=\"1.线程，同步，异步和回调函数\"></a>1.线程，同步，异步和回调函数</h3><h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><blockquote>\n<p>JS单线程，是指在JS引擎中负责解释和执行JavaScript代码的线程只有一个,即主线程。<br>实际上还存在其他的线程。例如：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程(例如在Node.js中)等等。这些线程可能存在于JS引擎之内，也可能存在于JS引擎之外。</p>\n</blockquote>\n<p><strong>Javascript 有一个 main thread 主线程和 call-stack 调用栈(执行栈)，所有的任务都会被放到调用栈等待主线程执行。</strong></p>\n<p><strong>并且一个 JavaScript 运行时包含了一个待处理的消息队列。每一个消息都有一个为了处理这个消息相关联的函数。</strong></p>\n<h4 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h4><p>1.函数调用形成了一个栈帧</p>\n<pre><code>function foo(b) {\n  var a = 10;\n  return a + b + 11;\n}\n\nfunction bar(x) {\n  var y = 3;\n  return foo(x * y);\n}\n\nconsole.log(bar(7));  \n</code></pre><blockquote>\n<p>当调用bar时，创建了第一个帧 ，帧中包含了bar的参数和局部变量。当bar调用foo时，第二个帧就被创建，并被压到第一个帧之上，帧中包含了foo的参数和局部变量。当foo返回时，最上层的帧就被弹出栈（剩下bar函数的调用帧 ）。当bar返回的时候，栈就空了。</p>\n</blockquote>\n<p>2.消息队列  </p>\n<blockquote>\n<p>在事件循环期间的某个时刻，运行时总是从最先进入队列的一个消息开始处理队列中的消息。正因如此，这个消息就会被移出队列，并将其作为输入参数调用与之关联的函数。为了使用这个函数，调用一个函数总是会为其创造一个新的栈帧，一如既往。</p>\n</blockquote>\n<p><strong>当异步线程执行完并且有了结果，会往消息队列推送该结果。</strong><br><strong>当主线程执行完调用栈里的任务，即调用栈为空时，会读取消息队列,并将其作为输入参数调用与之关联的函数。即添加到可执行栈中。</strong></p>\n<p>以上机制就叫做事件循环机制，取一个消息并执行的过程叫做一次循环。</p>\n<img src=\"/blog/2018/12/01/js中异步，同步，回调函数和Promise/1.png\">\n<p>剩下的概念就很好理解了：<br>同步：如果在函数返回结果的时候，调用者能够拿到预期的结果，即同步。</p>\n<p>异步：如果在函数返回的时候，调用者还不能购得到预期结果，而是将来通过一定的手段得到（例如回调函数），这就是异步。</p>\n<p>回调函数：如上文说道，每一个消息都有一个为了处理这个消息相关联的函数。该函数即为回调函数。</p>\n<blockquote>\n<p>主线程在执行完当前循环中的所有代码后，就会到消息队列取出这条消息，并执行它。到此为止，就完成了工作线程对主线程的通知，回调函数也就得到了执行。</p>\n</blockquote>\n<img src=\"/blog/2018/12/01/js中异步，同步，回调函数和Promise/2.png\">\n<pre><code>console.log(&quot;a&quot;);\nsetTimeout(function() {\n  console.log(&quot;b&quot;);\n}, 1000);\nsetTimeout(function() {\n  console.log(&quot;c&quot;);\n}, 0);\nconsole.log(&quot;d&quot;);\n</code></pre><p>以上代码执行结果是a d c b</p>\n<h3 id=\"2-Promise与回调地狱\"><a href=\"#2-Promise与回调地狱\" class=\"headerlink\" title=\"2.Promise与回调地狱\"></a>2.Promise与回调地狱</h3><h4 id=\"回调地狱\"><a href=\"#回调地狱\" class=\"headerlink\" title=\"回调地狱\"></a>回调地狱</h4><pre><code>listen( &quot;click&quot;, function handler(evt){\n  setTimeout( function request(){\n    ajax( &quot;http://some.url.1&quot;, function response(text){\n      if (text == &quot;hello&quot;) {\n        handler();\n      }\n      else if (text == &quot;world&quot;) {\n        request();\n      }\n    } );\n  }, 500) ;\n} );\n</code></pre><p>当多个回调函数嵌套就构成了回调地狱。除了缩进产生的横向扩展导致代码的阅读难度，此外还有执行顺序上的问题。<br>上面例子的执行顺序 <strong>监听click事件 =&gt; setTimeout =&gt; ajax =&gt; if判断</strong>，是直观逻辑上的顺序，但是在真实的异步JS程序中，经常会有很多噪音把事情搞乱。</p>\n<p>比如</p>\n<pre><code>doA( function(){\n  doB();\n\n  doC( function(){\n    doD();\n  } )\n\n  doE();\n} );\n\ndoF();\n</code></pre><p>这段代码执行顺序： <strong>doA =&gt; doF =&gt; doB =&gt; doC =&gt; doE =&gt; doE =&gt; doD</strong><br>这很不符合直观上的逻辑</p>\n<p>当这样的回调嵌套出现很多的时候，代码可读性大大降低。</p>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>Promise就是为了解决回调地狱而产生的，Promise 本质上是一个绑定了回调的对象，而不是将回调传进函数内部。</p>\n<p>Promise 对象有以下两个特点： </p>\n<blockquote>\n<p>（1）对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n</blockquote>\n<blockquote>\n<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n</blockquote>\n<p>Promise基本用法</p>\n<pre><code>const promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n</code></pre><p>举个例子</p>\n<pre><code>setTimeout(function() {\n    console.log(&quot;log1&quot;);\n    setTimeout(function() {\n        console.log(&quot;log2&quot;);\n        setTimeout(function() {\n            console.log(&quot;log3&quot;);\n        }, 3000);\n    }, 2000); \n}, 1000);\n</code></pre><p>经过Promise封装后</p>\n<pre><code>function firtTimeout() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      resolve(&quot;log1&quot;);\n    }, 1000);\n  })\n}\n\nfunction secondTimeout(result) {\n  console.log(result);\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      (&quot;log2&quot;);\n    }, 2000);\n  })\n}\n\nfunction ThirdTimeout(result) {\n  console.log(result);\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      resolve(&quot;log3&quot;);\n    }, 3000);\n  })\n}\n\nfirtTimeout()\n.then(secondTimeout)\n.then(ThirdTimeout)\n.then(function(result) {\n  console.log(result)\n})\n</code></pre><blockquote>\n<p>参考资料 ：<br><a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">阮一峰《ECMAScript6入门》</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\" target=\"_blank\" rel=\"noopener\">MDN web docs 使用Promises\n</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">MDN web docs 并发模型与事件循环\n</a><br><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/README.md\" target=\"_blank\" rel=\"noopener\">getify/You-Dont-Know-JS</a></p>\n</blockquote>\n"},{"title":"Nodejs和树莓派小车","date":"2018-12-03T06:31:46.000Z","comments":0,"description":"nodejs驱动树莓派","_content":"\n简略的说一下树莓派小车的制作过程\n\n所需材料：  \n>  1.树莓派3b+  \n  2.l298n电机驱动模块  \n  3.3.3v直流电机  \n  4.dht11温湿度传感器  \n  5.sg90舵机\n\n#### 基本接线图 \n{% asset_img sketch.jpg %} \n\n\n#### 小车代码\n一开始采用的是rpio库但是pwm的问题一直没解决\n提了个issue https://github.com/jperkin/node-rpio/issues/80\n\n之后采用了johnny-five库， raspi-io库。\n由于JavaScript控制微秒级不精准所以采用了第三方库node-dht-sensor调用c++来控制传感器，之后通过websocket传递温湿度\n\n摄像头部分 用ffmpeg流传输到websocket转发到http上\n\n所需环境： \n\n>  1.os: raspbian  \n  2.nodejs  \n  3.ffmpeg\n\n具体api文档：  \n>[Johnny-Five](http://johnny-five.io/api/)  \n[raspi-io](https://github.com/nebrius/raspi-io)  \n[node-dht-sensor](https://github.com/momenso/node-dht-sensor)  \n[JSMpeg](https://github.com/phoboslab/jsmpeg)\n\n    var express = require('express');\n    var app = express();\n    var path = require('path');\n    var http = require('http').Server(app);\n    var five = require('johnny-five');\n    var Raspi = require('raspi-io');\n    var sensor = require('node-dht-sensor');\n    var ws = require('socket.io')(http);\n\n    app.use(express.static(path.join(__dirname, 'public')));\n\n    var board = new five.Board({\n      io: new Raspi()\n    });\n\n    function dht11() {\n      return sensor.read(11, 26)\n    }\n\n    board.on('ready', () => {\n\n      var io23 = new five.Pin({pin:23,mode:4}); //pwm\n      var io0 = new five.Pin({pin:0,mode:1}); //board_11 left back\n      var io1 = new five.Pin({pin:1,mode:1}); //board_12 left push\n      var io2 = new five.Pin({pin:2,mode:1}); //board_13 right push\n      var io3 = new five.Pin({pin:3,mode:1}); //board_15 right back\n\n      var angle = 90;\n      var servo = new five.Servo({pin:23,startAt:angle});\n\n      function set_low(){\n        io0.low();\n        io1.low();\n        io2.low();\n        io3.low();\n      };\n\n      set_low(); //set default\n\n      ws.on('connection',function(socket) {\n        setInterval(() => {\n          ws.emit('sensor', dht11());\n        }, 15000);\n      });\n\n      app.get('/', function(req, res){\n        res.render('index');\n      });\n\n      app.post('/w', function(req, res){\n        res.send('w');\n        io2.high();\n        io1.high();\n      });\n\n      app.post('/ws', function(req, res){\n        console.log('done');\n        res.send('ws');\n        io2.high();\n        io1.high();\n        setTimeout(() => {\n          set_low();\n        }, 800);\n      });\n\n      app.post('/l', function(req, res){\n        res.send('l');\n        io0.high();\n        io2.high();\n      });\n\n      app.post('/ls', function(req, res){\n        res.send('ls');\n        io0.high();\n        io2.high();\n        setTimeout(() => {\n          set_low();\n        }, 600);\n      });\n\n      app.post('/r', function(req, res){\n        res.send('r');\n        io1.high();\n        io3.high();\n      });\n      \n      app.post('/rs', function(req, res){\n        res.send('rs');\n        io1.high();\n        io3.high();\n        setTimeout(() => {\n          set_low();\n        }, 600);\n      });\n\n      app.post('/b', function(req, res){ \n        res.send('b');\n        io0.high();\n        io3.high();\n      });\n        \n      app.post('/bs', function(req, res){ \n        res.send('bs');\n        io0.high();\n        io3.high();\n        setTimeout(() => {\n          set_low();\n        }, 800);\n      });\n      \n      app.post('/stop', function(req, res){\n        res.send('stop');\n        set_low();\n      });\n\n      app.post('/cl', function(req, res){ \n        res.send('cl');\n        if (angle >= 0 && angle <= 180) {\n          angle = angle - 45;\n          servo.to(angle);\n        }\n      });\n\n      app.post('/cr', function(req, res){ \n        res.send('cr');\n        if (angle >= 0 && angle <= 180) {\n          angle = angle + 45;\n          servo.to(angle);\n        }\n      });\n\n      app.post('/creset', function(req, res){ \n        res.send('creset');\n        angle = 90;\n        servo.to(angle);\n      });\n    });\n\n    http.listen(3000, function(){\n      console.log('listening on *:3000');\n    });\n\n可以把这些功能封装成一个对象 可能可读性更高\n\n同时要启动ffmpeg和ws服务器\n\n前端显示：\n{% asset_img index.png %} \n\n\n#### 语音控制代码\n{% asset_img pi0.jpg %} \n之前用了respeaker的2mic的麦克风阵列 原来的的树莓派3b，没有足够的io接口，所以用raspberrypi zero来做语音终端向3b发送控制指令。\n\n所需环境\n>  1.os: raspbian  \n  2.nodejs  \n  3.arecord\n\n文档：  \n>[respeaker文档](http://wiki.seeedstudio.com/cn/ReSpeaker_2_Mics_Pi_HAT/#2)\n\n大致流程：   \n**安装好respeaker驱动(respeaker文档) => arecord录音 => 调用百度语音识别api，上传百度服务器 => 拿到识别结果 向3b上的http服务器发送消息**\n\n    var fs = require ('fs');\n    var exec = require('child_process').exec; \n    var axios = require('axios');\n\n    function get_token() {\n      var url = 'https://aip.baidubce.com/oauth/2.0/token?'\n      return axios.get(url, {\n        params: {\n          grant_type: 'client_credentials',\n          client_id: 'Your ID',\n          client_secret: 'Your Secret'\n        }\n      }).then((response) => {\n        return Promise.resolve(response.data.access_token)\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    }\n\n    function get_text(token, data) {\n      var data = fs.readFileSync('demo.pcm');\n      return axios({\n        url: `http://vop.baidu.com/server_api?cuid=1E-30-7E-09-21-FD&token=${token}`,\n        method: 'post',\n        data: data,\n        headers: {\n          'Content-Type': 'audio/pcm;rate=16000'\n        }\n      }).then(function(response) {\n        console.log(response.data)\n        return Promise.resolve(response.data.result[0]);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n\n    function forward() {\n      axios.post('http://192.168.1.xx:3000/ws', {});\n    }\n\n    function back() {\n      axios.post('http://192.168.1.xx:3000/bs', {});\n    }\n\n    function left() {\n      axios.post('http://192.168.1.xx:3000/ls', {});\n    }\n\n    function right() {\n      axios.post('http://192.168.1.xx:3000/rs', {});\n    }\n\n    function record() {\n      var cmdStr = 'arecord -d 3 -c 1 -f cd -r 8000 -Dhw:1 /home/voice/demo.pcm';\n      console.log('----------------begin recording----------------');\n      return new Promise((resolve,reject) => {\n        exec(cmdStr, function(err, stdout, stderr) {\n          if (err) {\n            reject(err);\n          }\n          else {\n            resolve();\n            console.log('----------------end recording------------------');\n          }\n        });\n      });\n    }\n\n    setInterval(() => {\n      record()\n      .then(get_token)\n      .then(get_text)\n      .then(function(text) {\n        console.log(text);\n        if(text === '前进，') {\n          forward();\n        }\n        else if(text === '后退，') {\n          back();\n        }\n        else if(text === '左转，') {\n          left();\n        }\n        else if(text === '右转，') {\n          right();\n        }\n      });\n    }, 4500);\n\n终端如图：\n{% asset_img terminal.png %}  \n\n{% asset_img car.jpg %} ","source":"_posts/nodejs和树莓派小车.md","raw":"---\ntitle: Nodejs和树莓派小车\ndate: 2018-12-03 14:31:46\ntags: [RaspberryPi, Nodejs]\ncategories: RaspberryPi\ncomments: false\ndescription:  nodejs驱动树莓派\n---\n\n简略的说一下树莓派小车的制作过程\n\n所需材料：  \n>  1.树莓派3b+  \n  2.l298n电机驱动模块  \n  3.3.3v直流电机  \n  4.dht11温湿度传感器  \n  5.sg90舵机\n\n#### 基本接线图 \n{% asset_img sketch.jpg %} \n\n\n#### 小车代码\n一开始采用的是rpio库但是pwm的问题一直没解决\n提了个issue https://github.com/jperkin/node-rpio/issues/80\n\n之后采用了johnny-five库， raspi-io库。\n由于JavaScript控制微秒级不精准所以采用了第三方库node-dht-sensor调用c++来控制传感器，之后通过websocket传递温湿度\n\n摄像头部分 用ffmpeg流传输到websocket转发到http上\n\n所需环境： \n\n>  1.os: raspbian  \n  2.nodejs  \n  3.ffmpeg\n\n具体api文档：  \n>[Johnny-Five](http://johnny-five.io/api/)  \n[raspi-io](https://github.com/nebrius/raspi-io)  \n[node-dht-sensor](https://github.com/momenso/node-dht-sensor)  \n[JSMpeg](https://github.com/phoboslab/jsmpeg)\n\n    var express = require('express');\n    var app = express();\n    var path = require('path');\n    var http = require('http').Server(app);\n    var five = require('johnny-five');\n    var Raspi = require('raspi-io');\n    var sensor = require('node-dht-sensor');\n    var ws = require('socket.io')(http);\n\n    app.use(express.static(path.join(__dirname, 'public')));\n\n    var board = new five.Board({\n      io: new Raspi()\n    });\n\n    function dht11() {\n      return sensor.read(11, 26)\n    }\n\n    board.on('ready', () => {\n\n      var io23 = new five.Pin({pin:23,mode:4}); //pwm\n      var io0 = new five.Pin({pin:0,mode:1}); //board_11 left back\n      var io1 = new five.Pin({pin:1,mode:1}); //board_12 left push\n      var io2 = new five.Pin({pin:2,mode:1}); //board_13 right push\n      var io3 = new five.Pin({pin:3,mode:1}); //board_15 right back\n\n      var angle = 90;\n      var servo = new five.Servo({pin:23,startAt:angle});\n\n      function set_low(){\n        io0.low();\n        io1.low();\n        io2.low();\n        io3.low();\n      };\n\n      set_low(); //set default\n\n      ws.on('connection',function(socket) {\n        setInterval(() => {\n          ws.emit('sensor', dht11());\n        }, 15000);\n      });\n\n      app.get('/', function(req, res){\n        res.render('index');\n      });\n\n      app.post('/w', function(req, res){\n        res.send('w');\n        io2.high();\n        io1.high();\n      });\n\n      app.post('/ws', function(req, res){\n        console.log('done');\n        res.send('ws');\n        io2.high();\n        io1.high();\n        setTimeout(() => {\n          set_low();\n        }, 800);\n      });\n\n      app.post('/l', function(req, res){\n        res.send('l');\n        io0.high();\n        io2.high();\n      });\n\n      app.post('/ls', function(req, res){\n        res.send('ls');\n        io0.high();\n        io2.high();\n        setTimeout(() => {\n          set_low();\n        }, 600);\n      });\n\n      app.post('/r', function(req, res){\n        res.send('r');\n        io1.high();\n        io3.high();\n      });\n      \n      app.post('/rs', function(req, res){\n        res.send('rs');\n        io1.high();\n        io3.high();\n        setTimeout(() => {\n          set_low();\n        }, 600);\n      });\n\n      app.post('/b', function(req, res){ \n        res.send('b');\n        io0.high();\n        io3.high();\n      });\n        \n      app.post('/bs', function(req, res){ \n        res.send('bs');\n        io0.high();\n        io3.high();\n        setTimeout(() => {\n          set_low();\n        }, 800);\n      });\n      \n      app.post('/stop', function(req, res){\n        res.send('stop');\n        set_low();\n      });\n\n      app.post('/cl', function(req, res){ \n        res.send('cl');\n        if (angle >= 0 && angle <= 180) {\n          angle = angle - 45;\n          servo.to(angle);\n        }\n      });\n\n      app.post('/cr', function(req, res){ \n        res.send('cr');\n        if (angle >= 0 && angle <= 180) {\n          angle = angle + 45;\n          servo.to(angle);\n        }\n      });\n\n      app.post('/creset', function(req, res){ \n        res.send('creset');\n        angle = 90;\n        servo.to(angle);\n      });\n    });\n\n    http.listen(3000, function(){\n      console.log('listening on *:3000');\n    });\n\n可以把这些功能封装成一个对象 可能可读性更高\n\n同时要启动ffmpeg和ws服务器\n\n前端显示：\n{% asset_img index.png %} \n\n\n#### 语音控制代码\n{% asset_img pi0.jpg %} \n之前用了respeaker的2mic的麦克风阵列 原来的的树莓派3b，没有足够的io接口，所以用raspberrypi zero来做语音终端向3b发送控制指令。\n\n所需环境\n>  1.os: raspbian  \n  2.nodejs  \n  3.arecord\n\n文档：  \n>[respeaker文档](http://wiki.seeedstudio.com/cn/ReSpeaker_2_Mics_Pi_HAT/#2)\n\n大致流程：   \n**安装好respeaker驱动(respeaker文档) => arecord录音 => 调用百度语音识别api，上传百度服务器 => 拿到识别结果 向3b上的http服务器发送消息**\n\n    var fs = require ('fs');\n    var exec = require('child_process').exec; \n    var axios = require('axios');\n\n    function get_token() {\n      var url = 'https://aip.baidubce.com/oauth/2.0/token?'\n      return axios.get(url, {\n        params: {\n          grant_type: 'client_credentials',\n          client_id: 'Your ID',\n          client_secret: 'Your Secret'\n        }\n      }).then((response) => {\n        return Promise.resolve(response.data.access_token)\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    }\n\n    function get_text(token, data) {\n      var data = fs.readFileSync('demo.pcm');\n      return axios({\n        url: `http://vop.baidu.com/server_api?cuid=1E-30-7E-09-21-FD&token=${token}`,\n        method: 'post',\n        data: data,\n        headers: {\n          'Content-Type': 'audio/pcm;rate=16000'\n        }\n      }).then(function(response) {\n        console.log(response.data)\n        return Promise.resolve(response.data.result[0]);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n\n    function forward() {\n      axios.post('http://192.168.1.xx:3000/ws', {});\n    }\n\n    function back() {\n      axios.post('http://192.168.1.xx:3000/bs', {});\n    }\n\n    function left() {\n      axios.post('http://192.168.1.xx:3000/ls', {});\n    }\n\n    function right() {\n      axios.post('http://192.168.1.xx:3000/rs', {});\n    }\n\n    function record() {\n      var cmdStr = 'arecord -d 3 -c 1 -f cd -r 8000 -Dhw:1 /home/voice/demo.pcm';\n      console.log('----------------begin recording----------------');\n      return new Promise((resolve,reject) => {\n        exec(cmdStr, function(err, stdout, stderr) {\n          if (err) {\n            reject(err);\n          }\n          else {\n            resolve();\n            console.log('----------------end recording------------------');\n          }\n        });\n      });\n    }\n\n    setInterval(() => {\n      record()\n      .then(get_token)\n      .then(get_text)\n      .then(function(text) {\n        console.log(text);\n        if(text === '前进，') {\n          forward();\n        }\n        else if(text === '后退，') {\n          back();\n        }\n        else if(text === '左转，') {\n          left();\n        }\n        else if(text === '右转，') {\n          right();\n        }\n      });\n    }, 4500);\n\n终端如图：\n{% asset_img terminal.png %}  \n\n{% asset_img car.jpg %} ","slug":"nodejs和树莓派小车","published":1,"updated":"2018-12-06T15:03:17.512Z","layout":"post","photos":[],"link":"","_id":"cjpf91v2k00020iv1pwkyqag9","content":"<p>简略的说一下树莓派小车的制作过程</p>\n<p>所需材料：  </p>\n<blockquote>\n<p> 1.树莓派3b+<br>  2.l298n电机驱动模块<br>  3.3.3v直流电机<br>  4.dht11温湿度传感器<br>  5.sg90舵机</p>\n</blockquote>\n<h4 id=\"基本接线图\"><a href=\"#基本接线图\" class=\"headerlink\" title=\"基本接线图\"></a>基本接线图</h4><img src=\"/blog/2018/12/03/nodejs和树莓派小车/sketch.jpg\"> \n<h4 id=\"小车代码\"><a href=\"#小车代码\" class=\"headerlink\" title=\"小车代码\"></a>小车代码</h4><p>一开始采用的是rpio库但是pwm的问题一直没解决<br>提了个issue <a href=\"https://github.com/jperkin/node-rpio/issues/80\" target=\"_blank\" rel=\"noopener\">https://github.com/jperkin/node-rpio/issues/80</a></p>\n<p>之后采用了johnny-five库， raspi-io库。<br>由于JavaScript控制微秒级不精准所以采用了第三方库node-dht-sensor调用c++来控制传感器，之后通过websocket传递温湿度</p>\n<p>摄像头部分 用ffmpeg流传输到websocket转发到http上</p>\n<p>所需环境： </p>\n<blockquote>\n<p> 1.os: raspbian<br>  2.nodejs<br>  3.ffmpeg</p>\n</blockquote>\n<p>具体api文档：  </p>\n<blockquote>\n<p><a href=\"http://johnny-five.io/api/\" target=\"_blank\" rel=\"noopener\">Johnny-Five</a><br><a href=\"https://github.com/nebrius/raspi-io\" target=\"_blank\" rel=\"noopener\">raspi-io</a><br><a href=\"https://github.com/momenso/node-dht-sensor\" target=\"_blank\" rel=\"noopener\">node-dht-sensor</a><br><a href=\"https://github.com/phoboslab/jsmpeg\" target=\"_blank\" rel=\"noopener\">JSMpeg</a></p>\n</blockquote>\n<pre><code>var express = require(&apos;express&apos;);\nvar app = express();\nvar path = require(&apos;path&apos;);\nvar http = require(&apos;http&apos;).Server(app);\nvar five = require(&apos;johnny-five&apos;);\nvar Raspi = require(&apos;raspi-io&apos;);\nvar sensor = require(&apos;node-dht-sensor&apos;);\nvar ws = require(&apos;socket.io&apos;)(http);\n\napp.use(express.static(path.join(__dirname, &apos;public&apos;)));\n\nvar board = new five.Board({\n  io: new Raspi()\n});\n\nfunction dht11() {\n  return sensor.read(11, 26)\n}\n\nboard.on(&apos;ready&apos;, () =&gt; {\n\n  var io23 = new five.Pin({pin:23,mode:4}); //pwm\n  var io0 = new five.Pin({pin:0,mode:1}); //board_11 left back\n  var io1 = new five.Pin({pin:1,mode:1}); //board_12 left push\n  var io2 = new five.Pin({pin:2,mode:1}); //board_13 right push\n  var io3 = new five.Pin({pin:3,mode:1}); //board_15 right back\n\n  var angle = 90;\n  var servo = new five.Servo({pin:23,startAt:angle});\n\n  function set_low(){\n    io0.low();\n    io1.low();\n    io2.low();\n    io3.low();\n  };\n\n  set_low(); //set default\n\n  ws.on(&apos;connection&apos;,function(socket) {\n    setInterval(() =&gt; {\n      ws.emit(&apos;sensor&apos;, dht11());\n    }, 15000);\n  });\n\n  app.get(&apos;/&apos;, function(req, res){\n    res.render(&apos;index&apos;);\n  });\n\n  app.post(&apos;/w&apos;, function(req, res){\n    res.send(&apos;w&apos;);\n    io2.high();\n    io1.high();\n  });\n\n  app.post(&apos;/ws&apos;, function(req, res){\n    console.log(&apos;done&apos;);\n    res.send(&apos;ws&apos;);\n    io2.high();\n    io1.high();\n    setTimeout(() =&gt; {\n      set_low();\n    }, 800);\n  });\n\n  app.post(&apos;/l&apos;, function(req, res){\n    res.send(&apos;l&apos;);\n    io0.high();\n    io2.high();\n  });\n\n  app.post(&apos;/ls&apos;, function(req, res){\n    res.send(&apos;ls&apos;);\n    io0.high();\n    io2.high();\n    setTimeout(() =&gt; {\n      set_low();\n    }, 600);\n  });\n\n  app.post(&apos;/r&apos;, function(req, res){\n    res.send(&apos;r&apos;);\n    io1.high();\n    io3.high();\n  });\n\n  app.post(&apos;/rs&apos;, function(req, res){\n    res.send(&apos;rs&apos;);\n    io1.high();\n    io3.high();\n    setTimeout(() =&gt; {\n      set_low();\n    }, 600);\n  });\n\n  app.post(&apos;/b&apos;, function(req, res){ \n    res.send(&apos;b&apos;);\n    io0.high();\n    io3.high();\n  });\n\n  app.post(&apos;/bs&apos;, function(req, res){ \n    res.send(&apos;bs&apos;);\n    io0.high();\n    io3.high();\n    setTimeout(() =&gt; {\n      set_low();\n    }, 800);\n  });\n\n  app.post(&apos;/stop&apos;, function(req, res){\n    res.send(&apos;stop&apos;);\n    set_low();\n  });\n\n  app.post(&apos;/cl&apos;, function(req, res){ \n    res.send(&apos;cl&apos;);\n    if (angle &gt;= 0 &amp;&amp; angle &lt;= 180) {\n      angle = angle - 45;\n      servo.to(angle);\n    }\n  });\n\n  app.post(&apos;/cr&apos;, function(req, res){ \n    res.send(&apos;cr&apos;);\n    if (angle &gt;= 0 &amp;&amp; angle &lt;= 180) {\n      angle = angle + 45;\n      servo.to(angle);\n    }\n  });\n\n  app.post(&apos;/creset&apos;, function(req, res){ \n    res.send(&apos;creset&apos;);\n    angle = 90;\n    servo.to(angle);\n  });\n});\n\nhttp.listen(3000, function(){\n  console.log(&apos;listening on *:3000&apos;);\n});\n</code></pre><p>可以把这些功能封装成一个对象 可能可读性更高</p>\n<p>同时要启动ffmpeg和ws服务器</p>\n<p>前端显示：<br><img src=\"/blog/2018/12/03/nodejs和树莓派小车/index.png\"> </p>\n<h4 id=\"语音控制代码\"><a href=\"#语音控制代码\" class=\"headerlink\" title=\"语音控制代码\"></a>语音控制代码</h4><img src=\"/blog/2018/12/03/nodejs和树莓派小车/pi0.jpg\"> \n<p>之前用了respeaker的2mic的麦克风阵列 原来的的树莓派3b，没有足够的io接口，所以用raspberrypi zero来做语音终端向3b发送控制指令。</p>\n<p>所需环境</p>\n<blockquote>\n<p> 1.os: raspbian<br>  2.nodejs<br>  3.arecord</p>\n</blockquote>\n<p>文档：  </p>\n<blockquote>\n<p><a href=\"http://wiki.seeedstudio.com/cn/ReSpeaker_2_Mics_Pi_HAT/#2\" target=\"_blank\" rel=\"noopener\">respeaker文档</a></p>\n</blockquote>\n<p>大致流程：<br><strong>安装好respeaker驱动(respeaker文档) =&gt; arecord录音 =&gt; 调用百度语音识别api，上传百度服务器 =&gt; 拿到识别结果 向3b上的http服务器发送消息</strong></p>\n<pre><code>var fs = require (&apos;fs&apos;);\nvar exec = require(&apos;child_process&apos;).exec; \nvar axios = require(&apos;axios&apos;);\n\nfunction get_token() {\n  var url = &apos;https://aip.baidubce.com/oauth/2.0/token?&apos;\n  return axios.get(url, {\n    params: {\n      grant_type: &apos;client_credentials&apos;,\n      client_id: &apos;Your ID&apos;,\n      client_secret: &apos;Your Secret&apos;\n    }\n  }).then((response) =&gt; {\n    return Promise.resolve(response.data.access_token)\n  })\n  .catch((error) =&gt; {\n    console.log(error);\n  });\n}\n\nfunction get_text(token, data) {\n  var data = fs.readFileSync(&apos;demo.pcm&apos;);\n  return axios({\n    url: `http://vop.baidu.com/server_api?cuid=1E-30-7E-09-21-FD&amp;token=${token}`,\n    method: &apos;post&apos;,\n    data: data,\n    headers: {\n      &apos;Content-Type&apos;: &apos;audio/pcm;rate=16000&apos;\n    }\n  }).then(function(response) {\n    console.log(response.data)\n    return Promise.resolve(response.data.result[0]);\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\n\nfunction forward() {\n  axios.post(&apos;http://192.168.1.xx:3000/ws&apos;, {});\n}\n\nfunction back() {\n  axios.post(&apos;http://192.168.1.xx:3000/bs&apos;, {});\n}\n\nfunction left() {\n  axios.post(&apos;http://192.168.1.xx:3000/ls&apos;, {});\n}\n\nfunction right() {\n  axios.post(&apos;http://192.168.1.xx:3000/rs&apos;, {});\n}\n\nfunction record() {\n  var cmdStr = &apos;arecord -d 3 -c 1 -f cd -r 8000 -Dhw:1 /home/voice/demo.pcm&apos;;\n  console.log(&apos;----------------begin recording----------------&apos;);\n  return new Promise((resolve,reject) =&gt; {\n    exec(cmdStr, function(err, stdout, stderr) {\n      if (err) {\n        reject(err);\n      }\n      else {\n        resolve();\n        console.log(&apos;----------------end recording------------------&apos;);\n      }\n    });\n  });\n}\n\nsetInterval(() =&gt; {\n  record()\n  .then(get_token)\n  .then(get_text)\n  .then(function(text) {\n    console.log(text);\n    if(text === &apos;前进，&apos;) {\n      forward();\n    }\n    else if(text === &apos;后退，&apos;) {\n      back();\n    }\n    else if(text === &apos;左转，&apos;) {\n      left();\n    }\n    else if(text === &apos;右转，&apos;) {\n      right();\n    }\n  });\n}, 4500);\n</code></pre><p>终端如图：<br><img src=\"/blog/2018/12/03/nodejs和树莓派小车/terminal.png\">  </p>\n<img src=\"/blog/2018/12/03/nodejs和树莓派小车/car.jpg\"> ","site":{"data":{}},"excerpt":"","more":"<p>简略的说一下树莓派小车的制作过程</p>\n<p>所需材料：  </p>\n<blockquote>\n<p> 1.树莓派3b+<br>  2.l298n电机驱动模块<br>  3.3.3v直流电机<br>  4.dht11温湿度传感器<br>  5.sg90舵机</p>\n</blockquote>\n<h4 id=\"基本接线图\"><a href=\"#基本接线图\" class=\"headerlink\" title=\"基本接线图\"></a>基本接线图</h4><img src=\"/blog/2018/12/03/nodejs和树莓派小车/sketch.jpg\"> \n<h4 id=\"小车代码\"><a href=\"#小车代码\" class=\"headerlink\" title=\"小车代码\"></a>小车代码</h4><p>一开始采用的是rpio库但是pwm的问题一直没解决<br>提了个issue <a href=\"https://github.com/jperkin/node-rpio/issues/80\" target=\"_blank\" rel=\"noopener\">https://github.com/jperkin/node-rpio/issues/80</a></p>\n<p>之后采用了johnny-five库， raspi-io库。<br>由于JavaScript控制微秒级不精准所以采用了第三方库node-dht-sensor调用c++来控制传感器，之后通过websocket传递温湿度</p>\n<p>摄像头部分 用ffmpeg流传输到websocket转发到http上</p>\n<p>所需环境： </p>\n<blockquote>\n<p> 1.os: raspbian<br>  2.nodejs<br>  3.ffmpeg</p>\n</blockquote>\n<p>具体api文档：  </p>\n<blockquote>\n<p><a href=\"http://johnny-five.io/api/\" target=\"_blank\" rel=\"noopener\">Johnny-Five</a><br><a href=\"https://github.com/nebrius/raspi-io\" target=\"_blank\" rel=\"noopener\">raspi-io</a><br><a href=\"https://github.com/momenso/node-dht-sensor\" target=\"_blank\" rel=\"noopener\">node-dht-sensor</a><br><a href=\"https://github.com/phoboslab/jsmpeg\" target=\"_blank\" rel=\"noopener\">JSMpeg</a></p>\n</blockquote>\n<pre><code>var express = require(&apos;express&apos;);\nvar app = express();\nvar path = require(&apos;path&apos;);\nvar http = require(&apos;http&apos;).Server(app);\nvar five = require(&apos;johnny-five&apos;);\nvar Raspi = require(&apos;raspi-io&apos;);\nvar sensor = require(&apos;node-dht-sensor&apos;);\nvar ws = require(&apos;socket.io&apos;)(http);\n\napp.use(express.static(path.join(__dirname, &apos;public&apos;)));\n\nvar board = new five.Board({\n  io: new Raspi()\n});\n\nfunction dht11() {\n  return sensor.read(11, 26)\n}\n\nboard.on(&apos;ready&apos;, () =&gt; {\n\n  var io23 = new five.Pin({pin:23,mode:4}); //pwm\n  var io0 = new five.Pin({pin:0,mode:1}); //board_11 left back\n  var io1 = new five.Pin({pin:1,mode:1}); //board_12 left push\n  var io2 = new five.Pin({pin:2,mode:1}); //board_13 right push\n  var io3 = new five.Pin({pin:3,mode:1}); //board_15 right back\n\n  var angle = 90;\n  var servo = new five.Servo({pin:23,startAt:angle});\n\n  function set_low(){\n    io0.low();\n    io1.low();\n    io2.low();\n    io3.low();\n  };\n\n  set_low(); //set default\n\n  ws.on(&apos;connection&apos;,function(socket) {\n    setInterval(() =&gt; {\n      ws.emit(&apos;sensor&apos;, dht11());\n    }, 15000);\n  });\n\n  app.get(&apos;/&apos;, function(req, res){\n    res.render(&apos;index&apos;);\n  });\n\n  app.post(&apos;/w&apos;, function(req, res){\n    res.send(&apos;w&apos;);\n    io2.high();\n    io1.high();\n  });\n\n  app.post(&apos;/ws&apos;, function(req, res){\n    console.log(&apos;done&apos;);\n    res.send(&apos;ws&apos;);\n    io2.high();\n    io1.high();\n    setTimeout(() =&gt; {\n      set_low();\n    }, 800);\n  });\n\n  app.post(&apos;/l&apos;, function(req, res){\n    res.send(&apos;l&apos;);\n    io0.high();\n    io2.high();\n  });\n\n  app.post(&apos;/ls&apos;, function(req, res){\n    res.send(&apos;ls&apos;);\n    io0.high();\n    io2.high();\n    setTimeout(() =&gt; {\n      set_low();\n    }, 600);\n  });\n\n  app.post(&apos;/r&apos;, function(req, res){\n    res.send(&apos;r&apos;);\n    io1.high();\n    io3.high();\n  });\n\n  app.post(&apos;/rs&apos;, function(req, res){\n    res.send(&apos;rs&apos;);\n    io1.high();\n    io3.high();\n    setTimeout(() =&gt; {\n      set_low();\n    }, 600);\n  });\n\n  app.post(&apos;/b&apos;, function(req, res){ \n    res.send(&apos;b&apos;);\n    io0.high();\n    io3.high();\n  });\n\n  app.post(&apos;/bs&apos;, function(req, res){ \n    res.send(&apos;bs&apos;);\n    io0.high();\n    io3.high();\n    setTimeout(() =&gt; {\n      set_low();\n    }, 800);\n  });\n\n  app.post(&apos;/stop&apos;, function(req, res){\n    res.send(&apos;stop&apos;);\n    set_low();\n  });\n\n  app.post(&apos;/cl&apos;, function(req, res){ \n    res.send(&apos;cl&apos;);\n    if (angle &gt;= 0 &amp;&amp; angle &lt;= 180) {\n      angle = angle - 45;\n      servo.to(angle);\n    }\n  });\n\n  app.post(&apos;/cr&apos;, function(req, res){ \n    res.send(&apos;cr&apos;);\n    if (angle &gt;= 0 &amp;&amp; angle &lt;= 180) {\n      angle = angle + 45;\n      servo.to(angle);\n    }\n  });\n\n  app.post(&apos;/creset&apos;, function(req, res){ \n    res.send(&apos;creset&apos;);\n    angle = 90;\n    servo.to(angle);\n  });\n});\n\nhttp.listen(3000, function(){\n  console.log(&apos;listening on *:3000&apos;);\n});\n</code></pre><p>可以把这些功能封装成一个对象 可能可读性更高</p>\n<p>同时要启动ffmpeg和ws服务器</p>\n<p>前端显示：<br><img src=\"/blog/2018/12/03/nodejs和树莓派小车/index.png\"> </p>\n<h4 id=\"语音控制代码\"><a href=\"#语音控制代码\" class=\"headerlink\" title=\"语音控制代码\"></a>语音控制代码</h4><img src=\"/blog/2018/12/03/nodejs和树莓派小车/pi0.jpg\"> \n<p>之前用了respeaker的2mic的麦克风阵列 原来的的树莓派3b，没有足够的io接口，所以用raspberrypi zero来做语音终端向3b发送控制指令。</p>\n<p>所需环境</p>\n<blockquote>\n<p> 1.os: raspbian<br>  2.nodejs<br>  3.arecord</p>\n</blockquote>\n<p>文档：  </p>\n<blockquote>\n<p><a href=\"http://wiki.seeedstudio.com/cn/ReSpeaker_2_Mics_Pi_HAT/#2\" target=\"_blank\" rel=\"noopener\">respeaker文档</a></p>\n</blockquote>\n<p>大致流程：<br><strong>安装好respeaker驱动(respeaker文档) =&gt; arecord录音 =&gt; 调用百度语音识别api，上传百度服务器 =&gt; 拿到识别结果 向3b上的http服务器发送消息</strong></p>\n<pre><code>var fs = require (&apos;fs&apos;);\nvar exec = require(&apos;child_process&apos;).exec; \nvar axios = require(&apos;axios&apos;);\n\nfunction get_token() {\n  var url = &apos;https://aip.baidubce.com/oauth/2.0/token?&apos;\n  return axios.get(url, {\n    params: {\n      grant_type: &apos;client_credentials&apos;,\n      client_id: &apos;Your ID&apos;,\n      client_secret: &apos;Your Secret&apos;\n    }\n  }).then((response) =&gt; {\n    return Promise.resolve(response.data.access_token)\n  })\n  .catch((error) =&gt; {\n    console.log(error);\n  });\n}\n\nfunction get_text(token, data) {\n  var data = fs.readFileSync(&apos;demo.pcm&apos;);\n  return axios({\n    url: `http://vop.baidu.com/server_api?cuid=1E-30-7E-09-21-FD&amp;token=${token}`,\n    method: &apos;post&apos;,\n    data: data,\n    headers: {\n      &apos;Content-Type&apos;: &apos;audio/pcm;rate=16000&apos;\n    }\n  }).then(function(response) {\n    console.log(response.data)\n    return Promise.resolve(response.data.result[0]);\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\n\nfunction forward() {\n  axios.post(&apos;http://192.168.1.xx:3000/ws&apos;, {});\n}\n\nfunction back() {\n  axios.post(&apos;http://192.168.1.xx:3000/bs&apos;, {});\n}\n\nfunction left() {\n  axios.post(&apos;http://192.168.1.xx:3000/ls&apos;, {});\n}\n\nfunction right() {\n  axios.post(&apos;http://192.168.1.xx:3000/rs&apos;, {});\n}\n\nfunction record() {\n  var cmdStr = &apos;arecord -d 3 -c 1 -f cd -r 8000 -Dhw:1 /home/voice/demo.pcm&apos;;\n  console.log(&apos;----------------begin recording----------------&apos;);\n  return new Promise((resolve,reject) =&gt; {\n    exec(cmdStr, function(err, stdout, stderr) {\n      if (err) {\n        reject(err);\n      }\n      else {\n        resolve();\n        console.log(&apos;----------------end recording------------------&apos;);\n      }\n    });\n  });\n}\n\nsetInterval(() =&gt; {\n  record()\n  .then(get_token)\n  .then(get_text)\n  .then(function(text) {\n    console.log(text);\n    if(text === &apos;前进，&apos;) {\n      forward();\n    }\n    else if(text === &apos;后退，&apos;) {\n      back();\n    }\n    else if(text === &apos;左转，&apos;) {\n      left();\n    }\n    else if(text === &apos;右转，&apos;) {\n      right();\n    }\n  });\n}, 4500);\n</code></pre><p>终端如图：<br><img src=\"/blog/2018/12/03/nodejs和树莓派小车/terminal.png\">  </p>\n<img src=\"/blog/2018/12/03/nodejs和树莓派小车/car.jpg\"> "},{"title":"JS的原型链","date":"2018-04-10T09:31:44.000Z","comments":0,"description":"__proto__,  prototype,  constructor","_content":"JavaScript的继承机制比较特殊 使用prototype链来实现继承\n\n#### 1. `__proto__`,  `prototype`,  `constructor`\n\nJavaScript有几种方式来生成实例对象\n\n##### *第一种方式生成实例对象*\n\n    var person = {}\n    person.name = \"recallwolf\"\n    person.age = 18\n\n`console.log(person)` ，我们看到如下图\n\n{% asset_img 选区1.png %}\n\n除了自身创建的name和age，我们发现还有一个   `__proto__` 对象。\n\n`__proto__` 对象是一个指针，指向上一级对象的prototype，这里指向的Object.prototype\n>关于 `Object.prototype` 参考[MDN web docs](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype)\n\n##### *第二种方式生成实例对象*\n\n    function Person(name, age){\n        this.name = name\n        this.age = age\n    }\n    var f = new Person(\"recallwolf\", 18)\n\n`Person()`就是构造函数，`f`是生成的实例对象\n和第一种方式**不一样的地方**在于，在我们声明构造函数的时候，会设置一个 `prototype` 属性，这个属性包含 `prototype` 对象。\n\n如下图所示，`prototype` 包含一个 `constructor` 和 `__proto__`\n\n{% asset_img 选区2.png %}\n\n`contructor` 可以看到是指向构造函数本身的指针\n`__proto__` 是一个指向上一级对象prototype的指针，这里也是指向的Object.prototype\n\n**相同的是**创建的实例对象和第一种创建实例对象都会有一个 `__proto__` 对象，都指向上一级 `prototype` ，这里指向的是 `Person.prototype`\n\n构造函数、原型和实例的关系如下图所示\n>图作者：[manxisuo](https://link.jianshu.com/?t=https://segmentfault.com/u/manxisuo)\n\n{% asset_img 图1.png %}\n\n> `prototype` 对象有什么用可以参考阮一峰老师的博文[Javascript继承机制的设计思想](http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html)\n\n#### 2.原型链\n我们查看Person对象是否有name属性时,JS引擎做了：\n1.查看对象本身有没有name属性，没有则下一步\n2.查看 `person.__proto__` 对象有没有 name 属性，如果没有，那么浏览器会继续查看 `name.__proto__.__proto__` ，直到找到name属性或者 `__proto__` 为null\n\n这个 `__proto__` 组成的链子就是原型链\n\n如下图所示\n>图作者：[manxisuo](https://link.jianshu.com/?t=https://segmentfault.com/u/manxisuo)\n\n{% asset_img 图2.png %}\n\n> `p` 指 `prototype` 属性，`[p]` 即 `__proto__` ，`[p]` 形成的链（虚线部分）就是原型链\n\n值得注意的是：\n\n1.`Object.prototype` 是顶级对象，所有对象都继承自它\n2.`Object.prototype.__proto__ === null`\n","source":"_posts/js的原型链.md","raw":"---\ntitle: JS的原型链\ndate: 2018-04-10 17:31:44\ntags: JavaScript\ncategories: JavaScript\ncomments: false\ndescription:  __proto__,  prototype,  constructor\n---\nJavaScript的继承机制比较特殊 使用prototype链来实现继承\n\n#### 1. `__proto__`,  `prototype`,  `constructor`\n\nJavaScript有几种方式来生成实例对象\n\n##### *第一种方式生成实例对象*\n\n    var person = {}\n    person.name = \"recallwolf\"\n    person.age = 18\n\n`console.log(person)` ，我们看到如下图\n\n{% asset_img 选区1.png %}\n\n除了自身创建的name和age，我们发现还有一个   `__proto__` 对象。\n\n`__proto__` 对象是一个指针，指向上一级对象的prototype，这里指向的Object.prototype\n>关于 `Object.prototype` 参考[MDN web docs](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype)\n\n##### *第二种方式生成实例对象*\n\n    function Person(name, age){\n        this.name = name\n        this.age = age\n    }\n    var f = new Person(\"recallwolf\", 18)\n\n`Person()`就是构造函数，`f`是生成的实例对象\n和第一种方式**不一样的地方**在于，在我们声明构造函数的时候，会设置一个 `prototype` 属性，这个属性包含 `prototype` 对象。\n\n如下图所示，`prototype` 包含一个 `constructor` 和 `__proto__`\n\n{% asset_img 选区2.png %}\n\n`contructor` 可以看到是指向构造函数本身的指针\n`__proto__` 是一个指向上一级对象prototype的指针，这里也是指向的Object.prototype\n\n**相同的是**创建的实例对象和第一种创建实例对象都会有一个 `__proto__` 对象，都指向上一级 `prototype` ，这里指向的是 `Person.prototype`\n\n构造函数、原型和实例的关系如下图所示\n>图作者：[manxisuo](https://link.jianshu.com/?t=https://segmentfault.com/u/manxisuo)\n\n{% asset_img 图1.png %}\n\n> `prototype` 对象有什么用可以参考阮一峰老师的博文[Javascript继承机制的设计思想](http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html)\n\n#### 2.原型链\n我们查看Person对象是否有name属性时,JS引擎做了：\n1.查看对象本身有没有name属性，没有则下一步\n2.查看 `person.__proto__` 对象有没有 name 属性，如果没有，那么浏览器会继续查看 `name.__proto__.__proto__` ，直到找到name属性或者 `__proto__` 为null\n\n这个 `__proto__` 组成的链子就是原型链\n\n如下图所示\n>图作者：[manxisuo](https://link.jianshu.com/?t=https://segmentfault.com/u/manxisuo)\n\n{% asset_img 图2.png %}\n\n> `p` 指 `prototype` 属性，`[p]` 即 `__proto__` ，`[p]` 形成的链（虚线部分）就是原型链\n\n值得注意的是：\n\n1.`Object.prototype` 是顶级对象，所有对象都继承自它\n2.`Object.prototype.__proto__ === null`\n","slug":"js的原型链","published":1,"updated":"2018-12-06T06:33:07.965Z","layout":"post","photos":[],"link":"","_id":"cjpf91v2q00050iv1l7qwnthe","content":"<p>JavaScript的继承机制比较特殊 使用prototype链来实现继承</p>\n<h4 id=\"1-proto-prototype-constructor\"><a href=\"#1-proto-prototype-constructor\" class=\"headerlink\" title=\"1. __proto__,  prototype,  constructor\"></a>1. <code>__proto__</code>,  <code>prototype</code>,  <code>constructor</code></h4><p>JavaScript有几种方式来生成实例对象</p>\n<h5 id=\"第一种方式生成实例对象\"><a href=\"#第一种方式生成实例对象\" class=\"headerlink\" title=\"第一种方式生成实例对象\"></a><em>第一种方式生成实例对象</em></h5><pre><code>var person = {}\nperson.name = &quot;recallwolf&quot;\nperson.age = 18\n</code></pre><p><code>console.log(person)</code> ，我们看到如下图</p>\n<img src=\"/blog/2018/04/10/js的原型链/选区1.png\">\n<p>除了自身创建的name和age，我们发现还有一个   <code>__proto__</code> 对象。</p>\n<p><code>__proto__</code> 对象是一个指针，指向上一级对象的prototype，这里指向的Object.prototype</p>\n<blockquote>\n<p>关于 <code>Object.prototype</code> 参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" target=\"_blank\" rel=\"noopener\">MDN web docs</a></p>\n</blockquote>\n<h5 id=\"第二种方式生成实例对象\"><a href=\"#第二种方式生成实例对象\" class=\"headerlink\" title=\"第二种方式生成实例对象\"></a><em>第二种方式生成实例对象</em></h5><pre><code>function Person(name, age){\n    this.name = name\n    this.age = age\n}\nvar f = new Person(&quot;recallwolf&quot;, 18)\n</code></pre><p><code>Person()</code>就是构造函数，<code>f</code>是生成的实例对象<br>和第一种方式<strong>不一样的地方</strong>在于，在我们声明构造函数的时候，会设置一个 <code>prototype</code> 属性，这个属性包含 <code>prototype</code> 对象。</p>\n<p>如下图所示，<code>prototype</code> 包含一个 <code>constructor</code> 和 <code>__proto__</code></p>\n<img src=\"/blog/2018/04/10/js的原型链/选区2.png\">\n<p><code>contructor</code> 可以看到是指向构造函数本身的指针<br><code>__proto__</code> 是一个指向上一级对象prototype的指针，这里也是指向的Object.prototype</p>\n<p><strong>相同的是</strong>创建的实例对象和第一种创建实例对象都会有一个 <code>__proto__</code> 对象，都指向上一级 <code>prototype</code> ，这里指向的是 <code>Person.prototype</code></p>\n<p>构造函数、原型和实例的关系如下图所示</p>\n<blockquote>\n<p>图作者：<a href=\"https://link.jianshu.com/?t=https://segmentfault.com/u/manxisuo\" target=\"_blank\" rel=\"noopener\">manxisuo</a></p>\n</blockquote>\n<img src=\"/blog/2018/04/10/js的原型链/图1.png\">\n<blockquote>\n<p><code>prototype</code> 对象有什么用可以参考阮一峰老师的博文<a href=\"http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript继承机制的设计思想</a></p>\n</blockquote>\n<h4 id=\"2-原型链\"><a href=\"#2-原型链\" class=\"headerlink\" title=\"2.原型链\"></a>2.原型链</h4><p>我们查看Person对象是否有name属性时,JS引擎做了：<br>1.查看对象本身有没有name属性，没有则下一步<br>2.查看 <code>person.__proto__</code> 对象有没有 name 属性，如果没有，那么浏览器会继续查看 <code>name.__proto__.__proto__</code> ，直到找到name属性或者 <code>__proto__</code> 为null</p>\n<p>这个 <code>__proto__</code> 组成的链子就是原型链</p>\n<p>如下图所示</p>\n<blockquote>\n<p>图作者：<a href=\"https://link.jianshu.com/?t=https://segmentfault.com/u/manxisuo\" target=\"_blank\" rel=\"noopener\">manxisuo</a></p>\n</blockquote>\n<img src=\"/blog/2018/04/10/js的原型链/图2.png\">\n<blockquote>\n<p><code>p</code> 指 <code>prototype</code> 属性，<code>[p]</code> 即 <code>__proto__</code> ，<code>[p]</code> 形成的链（虚线部分）就是原型链</p>\n</blockquote>\n<p>值得注意的是：</p>\n<p>1.<code>Object.prototype</code> 是顶级对象，所有对象都继承自它<br>2.<code>Object.prototype.__proto__ === null</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript的继承机制比较特殊 使用prototype链来实现继承</p>\n<h4 id=\"1-proto-prototype-constructor\"><a href=\"#1-proto-prototype-constructor\" class=\"headerlink\" title=\"1. __proto__,  prototype,  constructor\"></a>1. <code>__proto__</code>,  <code>prototype</code>,  <code>constructor</code></h4><p>JavaScript有几种方式来生成实例对象</p>\n<h5 id=\"第一种方式生成实例对象\"><a href=\"#第一种方式生成实例对象\" class=\"headerlink\" title=\"第一种方式生成实例对象\"></a><em>第一种方式生成实例对象</em></h5><pre><code>var person = {}\nperson.name = &quot;recallwolf&quot;\nperson.age = 18\n</code></pre><p><code>console.log(person)</code> ，我们看到如下图</p>\n<img src=\"/blog/2018/04/10/js的原型链/选区1.png\">\n<p>除了自身创建的name和age，我们发现还有一个   <code>__proto__</code> 对象。</p>\n<p><code>__proto__</code> 对象是一个指针，指向上一级对象的prototype，这里指向的Object.prototype</p>\n<blockquote>\n<p>关于 <code>Object.prototype</code> 参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" target=\"_blank\" rel=\"noopener\">MDN web docs</a></p>\n</blockquote>\n<h5 id=\"第二种方式生成实例对象\"><a href=\"#第二种方式生成实例对象\" class=\"headerlink\" title=\"第二种方式生成实例对象\"></a><em>第二种方式生成实例对象</em></h5><pre><code>function Person(name, age){\n    this.name = name\n    this.age = age\n}\nvar f = new Person(&quot;recallwolf&quot;, 18)\n</code></pre><p><code>Person()</code>就是构造函数，<code>f</code>是生成的实例对象<br>和第一种方式<strong>不一样的地方</strong>在于，在我们声明构造函数的时候，会设置一个 <code>prototype</code> 属性，这个属性包含 <code>prototype</code> 对象。</p>\n<p>如下图所示，<code>prototype</code> 包含一个 <code>constructor</code> 和 <code>__proto__</code></p>\n<img src=\"/blog/2018/04/10/js的原型链/选区2.png\">\n<p><code>contructor</code> 可以看到是指向构造函数本身的指针<br><code>__proto__</code> 是一个指向上一级对象prototype的指针，这里也是指向的Object.prototype</p>\n<p><strong>相同的是</strong>创建的实例对象和第一种创建实例对象都会有一个 <code>__proto__</code> 对象，都指向上一级 <code>prototype</code> ，这里指向的是 <code>Person.prototype</code></p>\n<p>构造函数、原型和实例的关系如下图所示</p>\n<blockquote>\n<p>图作者：<a href=\"https://link.jianshu.com/?t=https://segmentfault.com/u/manxisuo\" target=\"_blank\" rel=\"noopener\">manxisuo</a></p>\n</blockquote>\n<img src=\"/blog/2018/04/10/js的原型链/图1.png\">\n<blockquote>\n<p><code>prototype</code> 对象有什么用可以参考阮一峰老师的博文<a href=\"http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript继承机制的设计思想</a></p>\n</blockquote>\n<h4 id=\"2-原型链\"><a href=\"#2-原型链\" class=\"headerlink\" title=\"2.原型链\"></a>2.原型链</h4><p>我们查看Person对象是否有name属性时,JS引擎做了：<br>1.查看对象本身有没有name属性，没有则下一步<br>2.查看 <code>person.__proto__</code> 对象有没有 name 属性，如果没有，那么浏览器会继续查看 <code>name.__proto__.__proto__</code> ，直到找到name属性或者 <code>__proto__</code> 为null</p>\n<p>这个 <code>__proto__</code> 组成的链子就是原型链</p>\n<p>如下图所示</p>\n<blockquote>\n<p>图作者：<a href=\"https://link.jianshu.com/?t=https://segmentfault.com/u/manxisuo\" target=\"_blank\" rel=\"noopener\">manxisuo</a></p>\n</blockquote>\n<img src=\"/blog/2018/04/10/js的原型链/图2.png\">\n<blockquote>\n<p><code>p</code> 指 <code>prototype</code> 属性，<code>[p]</code> 即 <code>__proto__</code> ，<code>[p]</code> 形成的链（虚线部分）就是原型链</p>\n</blockquote>\n<p>值得注意的是：</p>\n<p>1.<code>Object.prototype</code> 是顶级对象，所有对象都继承自它<br>2.<code>Object.prototype.__proto__ === null</code></p>\n"},{"title":"JS的this指向","date":"2018-04-08T04:50:44.000Z","comments":0,"description":"关于JS this指向的总结","_content":"**一般情况下 this 不是在函数定义的时候确定指向！而是在函数执行的时候确定，this指向的是调用函数的那个对象**\n\n### this指向的几种情况\n#### 1.纯粹函数调用\n    function people(){\n        this.name = \"recallwolf\";\n        var age = 18;\n        \n        console.log(this); //Window\n        console.log(this.name); //recallwolf\n        console.log(this.age); //undefined\n    }\n    people();\n\nthis最终指向的是调用它的对象，这里的函数people实际是被Window对象所调用\n    \n    people() === window.people() //true\n\n#### 2.作为对象方法的调用\n    var o = {\n        name: \"recallwolf\",\n        fn: function(){\n            console.log(this.name);  //recallwolf\n        }\n    }\n    o.fn();\n\nfn是通过o.fn()执行的,这里的this就是指向调用fn的对象，即o\n\n##### 值得注意的是   \n\n    var o = {\n        a: 10,\n        b:{\n            a: 12,\n            fn: function(){\n                console.log(this.a); //12\n            }\n        }\n    }\n    o.b.fn();\n\nthis的指向并不是o而是b\n**如果一个函数中有this，这个函数被多个对象包含，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象**\n\n    var o = {\n        a: 18,\n        fn: function(){\n            var test = function(){\n                console.log(this.a); //undefined\n            }\n            test();\n        }\n    }\n    o.fn();\n\n**this不是在函数定义的时候确定指向，在函数里面定义的函数也是要看是谁调用的这个函数(方法)this才是谁；在这里并不是o调用fn里面的test函数，实际上是window**\n\n**换种说法，如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在JS的严格版中this是undefined**\n\n    var o = {\n            a: 18,\n            fn: function(){\n                var self = this;\n                var test = function(){\n                    console.log(self.a); //18\n                }\n                test();\n            }\n        }\n        o.fn();\n\n要达到预期目标可以把o这个对象用self保存下来\n\n#### 3.作为构造函数调用\n    function Fn(){\n        this.name = \"recallwolf\";\n    }\n    var a = new Fn();\n    console.log(a.name); //recallwolf\n\n需要注意的是new关键字可以改变this的指向，将这个this指向对象a\nnew关键字创建一个对象实例，这里用变量a创建了一个fn的实例（相当于复制了一份fn到对象a里面)\n此时new有三个作用：\n**1.在构造函数内部声明一个临时对象this\n2.在构造函数fn中默认返回这个临时对象this，赋给a\n3.将临时对象的_proto_指向fn的prototype**\n\n    function Fn(){\n        this.name = \"recallwolf\";\n        console.log(this); //Window\n    }\n    var a = Fn();\n    console.log(a.name); //Uncaught TypeError: Cannot read property 'name' of undefined\n\n这是因为this指向的是window对象\n\n##### 如果构造函数有返回值\n**如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。**\n\n    function Fn(){  \n        this.name = \"recallwolf\";  \n        return {};  \n    }\n    var a = new Fn();  \n    console.log(a.name); //undefined\n\n\n    function Fn(){  \n        this.name = \"recallwolf\";\n        return 1;\n    }\n    var a = new Fn();  \n    console.log(a.name); //recallwolf\n\n    function Fn(){  \n        this.name = \"recallwolf\"; \n        return undefined;\n    }\n    var a = new Fn();  \n    console.log(a.name); //recallwolf\n\n虽然null也是对象，但是在这里this还是指向那个函数的实例,null比较特殊\n\n    function Fn(){  \n        his.name = \"recallwolf\";  \n        return null;\n    }\n    var a = new Fn();  \n    console.log(a.name); //recallwolf\n\n\n#### 4.apply调用\napply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。\napply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。\n\n    var age = 18;\n    function fn(){\n        console.log(this.age);\n    }\n    var o = {};\n    o.age =  20;\n    o.m = fn;\n\n    o.m.apply(); //18\n    o.m.apply(o); //20\n\n### es6箭头函数\n**箭头函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象**\n\n    var o = {\n        id: 42,\n        fn: () => {\n            console.log(this.id);\n        }\n    }\n    o.fn(); //undefined\n\n    var o = {\n        id: 42,\n        fn: function(){\n            console.log(this.id);\n        }\n    }\n    o.fn(); //42\n\n普通函数this指向调用它的对象 即o\n箭头函数this即对象o的this 这里是window\n\n再举一个例子\n\n    var o = {\n        id: 12,\n        fn: function(){\n            var test = function(){\n                console.log(this.id) //undefined\n            }\n            test();\n        }\n    }\n    o.fn();\n\n    var o = {\n        id: 12,\n        fn: function(){\n            var test = () => {\n                console.log(this.id); //12\n            }\n            test();\n        }\n    }\n    o.fn();\n\n箭头函数this即函数fn的this 这里为o","source":"_posts/js的this指向.md","raw":"---\ntitle: JS的this指向\ndate: 2018-04-08 12:50:44\ntags: JavaScript\ncategories: JavaScript\ncomments: false\ndescription: 关于JS this指向的总结\n---\n**一般情况下 this 不是在函数定义的时候确定指向！而是在函数执行的时候确定，this指向的是调用函数的那个对象**\n\n### this指向的几种情况\n#### 1.纯粹函数调用\n    function people(){\n        this.name = \"recallwolf\";\n        var age = 18;\n        \n        console.log(this); //Window\n        console.log(this.name); //recallwolf\n        console.log(this.age); //undefined\n    }\n    people();\n\nthis最终指向的是调用它的对象，这里的函数people实际是被Window对象所调用\n    \n    people() === window.people() //true\n\n#### 2.作为对象方法的调用\n    var o = {\n        name: \"recallwolf\",\n        fn: function(){\n            console.log(this.name);  //recallwolf\n        }\n    }\n    o.fn();\n\nfn是通过o.fn()执行的,这里的this就是指向调用fn的对象，即o\n\n##### 值得注意的是   \n\n    var o = {\n        a: 10,\n        b:{\n            a: 12,\n            fn: function(){\n                console.log(this.a); //12\n            }\n        }\n    }\n    o.b.fn();\n\nthis的指向并不是o而是b\n**如果一个函数中有this，这个函数被多个对象包含，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象**\n\n    var o = {\n        a: 18,\n        fn: function(){\n            var test = function(){\n                console.log(this.a); //undefined\n            }\n            test();\n        }\n    }\n    o.fn();\n\n**this不是在函数定义的时候确定指向，在函数里面定义的函数也是要看是谁调用的这个函数(方法)this才是谁；在这里并不是o调用fn里面的test函数，实际上是window**\n\n**换种说法，如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在JS的严格版中this是undefined**\n\n    var o = {\n            a: 18,\n            fn: function(){\n                var self = this;\n                var test = function(){\n                    console.log(self.a); //18\n                }\n                test();\n            }\n        }\n        o.fn();\n\n要达到预期目标可以把o这个对象用self保存下来\n\n#### 3.作为构造函数调用\n    function Fn(){\n        this.name = \"recallwolf\";\n    }\n    var a = new Fn();\n    console.log(a.name); //recallwolf\n\n需要注意的是new关键字可以改变this的指向，将这个this指向对象a\nnew关键字创建一个对象实例，这里用变量a创建了一个fn的实例（相当于复制了一份fn到对象a里面)\n此时new有三个作用：\n**1.在构造函数内部声明一个临时对象this\n2.在构造函数fn中默认返回这个临时对象this，赋给a\n3.将临时对象的_proto_指向fn的prototype**\n\n    function Fn(){\n        this.name = \"recallwolf\";\n        console.log(this); //Window\n    }\n    var a = Fn();\n    console.log(a.name); //Uncaught TypeError: Cannot read property 'name' of undefined\n\n这是因为this指向的是window对象\n\n##### 如果构造函数有返回值\n**如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。**\n\n    function Fn(){  \n        this.name = \"recallwolf\";  \n        return {};  \n    }\n    var a = new Fn();  \n    console.log(a.name); //undefined\n\n\n    function Fn(){  \n        this.name = \"recallwolf\";\n        return 1;\n    }\n    var a = new Fn();  \n    console.log(a.name); //recallwolf\n\n    function Fn(){  \n        this.name = \"recallwolf\"; \n        return undefined;\n    }\n    var a = new Fn();  \n    console.log(a.name); //recallwolf\n\n虽然null也是对象，但是在这里this还是指向那个函数的实例,null比较特殊\n\n    function Fn(){  \n        his.name = \"recallwolf\";  \n        return null;\n    }\n    var a = new Fn();  \n    console.log(a.name); //recallwolf\n\n\n#### 4.apply调用\napply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。\napply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。\n\n    var age = 18;\n    function fn(){\n        console.log(this.age);\n    }\n    var o = {};\n    o.age =  20;\n    o.m = fn;\n\n    o.m.apply(); //18\n    o.m.apply(o); //20\n\n### es6箭头函数\n**箭头函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象**\n\n    var o = {\n        id: 42,\n        fn: () => {\n            console.log(this.id);\n        }\n    }\n    o.fn(); //undefined\n\n    var o = {\n        id: 42,\n        fn: function(){\n            console.log(this.id);\n        }\n    }\n    o.fn(); //42\n\n普通函数this指向调用它的对象 即o\n箭头函数this即对象o的this 这里是window\n\n再举一个例子\n\n    var o = {\n        id: 12,\n        fn: function(){\n            var test = function(){\n                console.log(this.id) //undefined\n            }\n            test();\n        }\n    }\n    o.fn();\n\n    var o = {\n        id: 12,\n        fn: function(){\n            var test = () => {\n                console.log(this.id); //12\n            }\n            test();\n        }\n    }\n    o.fn();\n\n箭头函数this即函数fn的this 这里为o","slug":"js的this指向","published":1,"updated":"2018-12-06T06:33:04.927Z","layout":"post","photos":[],"link":"","_id":"cjpf91v40000i0iv1yo0fzyh6","content":"<p><strong>一般情况下 this 不是在函数定义的时候确定指向！而是在函数执行的时候确定，this指向的是调用函数的那个对象</strong></p>\n<h3 id=\"this指向的几种情况\"><a href=\"#this指向的几种情况\" class=\"headerlink\" title=\"this指向的几种情况\"></a>this指向的几种情况</h3><h4 id=\"1-纯粹函数调用\"><a href=\"#1-纯粹函数调用\" class=\"headerlink\" title=\"1.纯粹函数调用\"></a>1.纯粹函数调用</h4><pre><code>function people(){\n    this.name = &quot;recallwolf&quot;;\n    var age = 18;\n\n    console.log(this); //Window\n    console.log(this.name); //recallwolf\n    console.log(this.age); //undefined\n}\npeople();\n</code></pre><p>this最终指向的是调用它的对象，这里的函数people实际是被Window对象所调用</p>\n<pre><code>people() === window.people() //true\n</code></pre><h4 id=\"2-作为对象方法的调用\"><a href=\"#2-作为对象方法的调用\" class=\"headerlink\" title=\"2.作为对象方法的调用\"></a>2.作为对象方法的调用</h4><pre><code>var o = {\n    name: &quot;recallwolf&quot;,\n    fn: function(){\n        console.log(this.name);  //recallwolf\n    }\n}\no.fn();\n</code></pre><p>fn是通过o.fn()执行的,这里的this就是指向调用fn的对象，即o</p>\n<h5 id=\"值得注意的是\"><a href=\"#值得注意的是\" class=\"headerlink\" title=\"值得注意的是\"></a>值得注意的是</h5><pre><code>var o = {\n    a: 10,\n    b:{\n        a: 12,\n        fn: function(){\n            console.log(this.a); //12\n        }\n    }\n}\no.b.fn();\n</code></pre><p>this的指向并不是o而是b<br><strong>如果一个函数中有this，这个函数被多个对象包含，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象</strong></p>\n<pre><code>var o = {\n    a: 18,\n    fn: function(){\n        var test = function(){\n            console.log(this.a); //undefined\n        }\n        test();\n    }\n}\no.fn();\n</code></pre><p><strong>this不是在函数定义的时候确定指向，在函数里面定义的函数也是要看是谁调用的这个函数(方法)this才是谁；在这里并不是o调用fn里面的test函数，实际上是window</strong></p>\n<p><strong>换种说法，如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在JS的严格版中this是undefined</strong></p>\n<pre><code>var o = {\n        a: 18,\n        fn: function(){\n            var self = this;\n            var test = function(){\n                console.log(self.a); //18\n            }\n            test();\n        }\n    }\n    o.fn();\n</code></pre><p>要达到预期目标可以把o这个对象用self保存下来</p>\n<h4 id=\"3-作为构造函数调用\"><a href=\"#3-作为构造函数调用\" class=\"headerlink\" title=\"3.作为构造函数调用\"></a>3.作为构造函数调用</h4><pre><code>function Fn(){\n    this.name = &quot;recallwolf&quot;;\n}\nvar a = new Fn();\nconsole.log(a.name); //recallwolf\n</code></pre><p>需要注意的是new关键字可以改变this的指向，将这个this指向对象a<br>new关键字创建一个对象实例，这里用变量a创建了一个fn的实例（相当于复制了一份fn到对象a里面)<br>此时new有三个作用：<br><strong>1.在构造函数内部声明一个临时对象this<br>2.在构造函数fn中默认返回这个临时对象this，赋给a<br>3.将临时对象的<em>proto</em>指向fn的prototype</strong></p>\n<pre><code>function Fn(){\n    this.name = &quot;recallwolf&quot;;\n    console.log(this); //Window\n}\nvar a = Fn();\nconsole.log(a.name); //Uncaught TypeError: Cannot read property &apos;name&apos; of undefined\n</code></pre><p>这是因为this指向的是window对象</p>\n<h5 id=\"如果构造函数有返回值\"><a href=\"#如果构造函数有返回值\" class=\"headerlink\" title=\"如果构造函数有返回值\"></a>如果构造函数有返回值</h5><p><strong>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。</strong></p>\n<pre><code>function Fn(){  \n    this.name = &quot;recallwolf&quot;;  \n    return {};  \n}\nvar a = new Fn();  \nconsole.log(a.name); //undefined\n\n\nfunction Fn(){  \n    this.name = &quot;recallwolf&quot;;\n    return 1;\n}\nvar a = new Fn();  \nconsole.log(a.name); //recallwolf\n\nfunction Fn(){  \n    this.name = &quot;recallwolf&quot;; \n    return undefined;\n}\nvar a = new Fn();  \nconsole.log(a.name); //recallwolf\n</code></pre><p>虽然null也是对象，但是在这里this还是指向那个函数的实例,null比较特殊</p>\n<pre><code>function Fn(){  \n    his.name = &quot;recallwolf&quot;;  \n    return null;\n}\nvar a = new Fn();  \nconsole.log(a.name); //recallwolf\n</code></pre><h4 id=\"4-apply调用\"><a href=\"#4-apply调用\" class=\"headerlink\" title=\"4.apply调用\"></a>4.apply调用</h4><p>apply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。<br>apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。</p>\n<pre><code>var age = 18;\nfunction fn(){\n    console.log(this.age);\n}\nvar o = {};\no.age =  20;\no.m = fn;\n\no.m.apply(); //18\no.m.apply(o); //20\n</code></pre><h3 id=\"es6箭头函数\"><a href=\"#es6箭头函数\" class=\"headerlink\" title=\"es6箭头函数\"></a>es6箭头函数</h3><p><strong>箭头函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象</strong></p>\n<pre><code>var o = {\n    id: 42,\n    fn: () =&gt; {\n        console.log(this.id);\n    }\n}\no.fn(); //undefined\n\nvar o = {\n    id: 42,\n    fn: function(){\n        console.log(this.id);\n    }\n}\no.fn(); //42\n</code></pre><p>普通函数this指向调用它的对象 即o<br>箭头函数this即对象o的this 这里是window</p>\n<p>再举一个例子</p>\n<pre><code>var o = {\n    id: 12,\n    fn: function(){\n        var test = function(){\n            console.log(this.id) //undefined\n        }\n        test();\n    }\n}\no.fn();\n\nvar o = {\n    id: 12,\n    fn: function(){\n        var test = () =&gt; {\n            console.log(this.id); //12\n        }\n        test();\n    }\n}\no.fn();\n</code></pre><p>箭头函数this即函数fn的this 这里为o</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>一般情况下 this 不是在函数定义的时候确定指向！而是在函数执行的时候确定，this指向的是调用函数的那个对象</strong></p>\n<h3 id=\"this指向的几种情况\"><a href=\"#this指向的几种情况\" class=\"headerlink\" title=\"this指向的几种情况\"></a>this指向的几种情况</h3><h4 id=\"1-纯粹函数调用\"><a href=\"#1-纯粹函数调用\" class=\"headerlink\" title=\"1.纯粹函数调用\"></a>1.纯粹函数调用</h4><pre><code>function people(){\n    this.name = &quot;recallwolf&quot;;\n    var age = 18;\n\n    console.log(this); //Window\n    console.log(this.name); //recallwolf\n    console.log(this.age); //undefined\n}\npeople();\n</code></pre><p>this最终指向的是调用它的对象，这里的函数people实际是被Window对象所调用</p>\n<pre><code>people() === window.people() //true\n</code></pre><h4 id=\"2-作为对象方法的调用\"><a href=\"#2-作为对象方法的调用\" class=\"headerlink\" title=\"2.作为对象方法的调用\"></a>2.作为对象方法的调用</h4><pre><code>var o = {\n    name: &quot;recallwolf&quot;,\n    fn: function(){\n        console.log(this.name);  //recallwolf\n    }\n}\no.fn();\n</code></pre><p>fn是通过o.fn()执行的,这里的this就是指向调用fn的对象，即o</p>\n<h5 id=\"值得注意的是\"><a href=\"#值得注意的是\" class=\"headerlink\" title=\"值得注意的是\"></a>值得注意的是</h5><pre><code>var o = {\n    a: 10,\n    b:{\n        a: 12,\n        fn: function(){\n            console.log(this.a); //12\n        }\n    }\n}\no.b.fn();\n</code></pre><p>this的指向并不是o而是b<br><strong>如果一个函数中有this，这个函数被多个对象包含，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象</strong></p>\n<pre><code>var o = {\n    a: 18,\n    fn: function(){\n        var test = function(){\n            console.log(this.a); //undefined\n        }\n        test();\n    }\n}\no.fn();\n</code></pre><p><strong>this不是在函数定义的时候确定指向，在函数里面定义的函数也是要看是谁调用的这个函数(方法)this才是谁；在这里并不是o调用fn里面的test函数，实际上是window</strong></p>\n<p><strong>换种说法，如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在JS的严格版中this是undefined</strong></p>\n<pre><code>var o = {\n        a: 18,\n        fn: function(){\n            var self = this;\n            var test = function(){\n                console.log(self.a); //18\n            }\n            test();\n        }\n    }\n    o.fn();\n</code></pre><p>要达到预期目标可以把o这个对象用self保存下来</p>\n<h4 id=\"3-作为构造函数调用\"><a href=\"#3-作为构造函数调用\" class=\"headerlink\" title=\"3.作为构造函数调用\"></a>3.作为构造函数调用</h4><pre><code>function Fn(){\n    this.name = &quot;recallwolf&quot;;\n}\nvar a = new Fn();\nconsole.log(a.name); //recallwolf\n</code></pre><p>需要注意的是new关键字可以改变this的指向，将这个this指向对象a<br>new关键字创建一个对象实例，这里用变量a创建了一个fn的实例（相当于复制了一份fn到对象a里面)<br>此时new有三个作用：<br><strong>1.在构造函数内部声明一个临时对象this<br>2.在构造函数fn中默认返回这个临时对象this，赋给a<br>3.将临时对象的<em>proto</em>指向fn的prototype</strong></p>\n<pre><code>function Fn(){\n    this.name = &quot;recallwolf&quot;;\n    console.log(this); //Window\n}\nvar a = Fn();\nconsole.log(a.name); //Uncaught TypeError: Cannot read property &apos;name&apos; of undefined\n</code></pre><p>这是因为this指向的是window对象</p>\n<h5 id=\"如果构造函数有返回值\"><a href=\"#如果构造函数有返回值\" class=\"headerlink\" title=\"如果构造函数有返回值\"></a>如果构造函数有返回值</h5><p><strong>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。</strong></p>\n<pre><code>function Fn(){  \n    this.name = &quot;recallwolf&quot;;  \n    return {};  \n}\nvar a = new Fn();  \nconsole.log(a.name); //undefined\n\n\nfunction Fn(){  \n    this.name = &quot;recallwolf&quot;;\n    return 1;\n}\nvar a = new Fn();  \nconsole.log(a.name); //recallwolf\n\nfunction Fn(){  \n    this.name = &quot;recallwolf&quot;; \n    return undefined;\n}\nvar a = new Fn();  \nconsole.log(a.name); //recallwolf\n</code></pre><p>虽然null也是对象，但是在这里this还是指向那个函数的实例,null比较特殊</p>\n<pre><code>function Fn(){  \n    his.name = &quot;recallwolf&quot;;  \n    return null;\n}\nvar a = new Fn();  \nconsole.log(a.name); //recallwolf\n</code></pre><h4 id=\"4-apply调用\"><a href=\"#4-apply调用\" class=\"headerlink\" title=\"4.apply调用\"></a>4.apply调用</h4><p>apply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。<br>apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。</p>\n<pre><code>var age = 18;\nfunction fn(){\n    console.log(this.age);\n}\nvar o = {};\no.age =  20;\no.m = fn;\n\no.m.apply(); //18\no.m.apply(o); //20\n</code></pre><h3 id=\"es6箭头函数\"><a href=\"#es6箭头函数\" class=\"headerlink\" title=\"es6箭头函数\"></a>es6箭头函数</h3><p><strong>箭头函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象</strong></p>\n<pre><code>var o = {\n    id: 42,\n    fn: () =&gt; {\n        console.log(this.id);\n    }\n}\no.fn(); //undefined\n\nvar o = {\n    id: 42,\n    fn: function(){\n        console.log(this.id);\n    }\n}\no.fn(); //42\n</code></pre><p>普通函数this指向调用它的对象 即o<br>箭头函数this即对象o的this 这里是window</p>\n<p>再举一个例子</p>\n<pre><code>var o = {\n    id: 12,\n    fn: function(){\n        var test = function(){\n            console.log(this.id) //undefined\n        }\n        test();\n    }\n}\no.fn();\n\nvar o = {\n    id: 12,\n    fn: function(){\n        var test = () =&gt; {\n            console.log(this.id); //12\n        }\n        test();\n    }\n}\no.fn();\n</code></pre><p>箭头函数this即函数fn的this 这里为o</p>\n"},{"title":"JS闭包","date":"2018-12-07T14:26:48.000Z","comments":0,"description":"有关JS闭包","_content":"\n#### 作用域\n\n词法作用域中使用的域，是变量在代码中声明的位置所决定的。嵌套的函数可以访问在其外部声明的变量。\n\n    var a = 100;\n    function init() {\n      var b = 101;\n      console.log(\"init a:\" + a);\n      function display() {\n        console.log(\"display a:\" + a);\n        console.log(\"display b:\" + b);\n      }  \n      display();\n    }\n    init();\n\n运行结果：\n\n    init a:100\n    display a:100\n    display b:101\n\n#### 闭包\n闭包能够读取其他函数内部变量。允许将函数与其所操作的某些数据（环境）关联起来。\n\n举个列子\n\n    function add(a) {\n      return function(b) {\n        a = a + b\n        console.log(a)\n      }\n    }\n    var add3 = add(100);\n    var add10 = add(110);\n    add3(3);  //103\n    add10(10);  //120\n\nadd3和add10都是闭包。它们共享相同的函数定义，但是保存了不同的词法环境。在add3的环境中，a为3。而在add10中，a则为10。\n\n闭包可以使变量的值始终保持在内存中。\n\n    function init() {\n      var a = 1;\n      return function() {\n        a += 1;\n        console.log(a);\n      }\n    }\n\n    var func = init();\n    func();  //2\n    func();  //3\n    func();  //4\n    \n\na并没有在func调用完成后销毁，而是一直保存在内存中。init是匿名函数的父级，匿名函数被赋值给全局变量，会一直存在于内存中。所以init函数也会存在于内存之中。\n\n大量的使用闭包会占用大量的内存，可能会导致内存泄漏，所以在退出函数之前删除局部变量。\n\n    function init() {\n      var a = 1;\n      return {\n        add: function() {\n          a += 1;\n          console.log(a);\n        },\n        clear: function() {\n          a = undefined;\n        }\n      } \n    }\n    var func = init();\n    func.add();  //2\n    func.clear(); \n    func.add(); //NaN\n    \n\n要避免大量的使用闭包，在模拟私有方法的时候可以考虑用let关键词。","source":"_posts/js闭包.md","raw":"---\ntitle: JS闭包\ndate: 2018-12-07 22:26:48\ntags: JavaScript\ncategories: JavaScript\ncomments: false\ndescription: 有关JS闭包\n---\n\n#### 作用域\n\n词法作用域中使用的域，是变量在代码中声明的位置所决定的。嵌套的函数可以访问在其外部声明的变量。\n\n    var a = 100;\n    function init() {\n      var b = 101;\n      console.log(\"init a:\" + a);\n      function display() {\n        console.log(\"display a:\" + a);\n        console.log(\"display b:\" + b);\n      }  \n      display();\n    }\n    init();\n\n运行结果：\n\n    init a:100\n    display a:100\n    display b:101\n\n#### 闭包\n闭包能够读取其他函数内部变量。允许将函数与其所操作的某些数据（环境）关联起来。\n\n举个列子\n\n    function add(a) {\n      return function(b) {\n        a = a + b\n        console.log(a)\n      }\n    }\n    var add3 = add(100);\n    var add10 = add(110);\n    add3(3);  //103\n    add10(10);  //120\n\nadd3和add10都是闭包。它们共享相同的函数定义，但是保存了不同的词法环境。在add3的环境中，a为3。而在add10中，a则为10。\n\n闭包可以使变量的值始终保持在内存中。\n\n    function init() {\n      var a = 1;\n      return function() {\n        a += 1;\n        console.log(a);\n      }\n    }\n\n    var func = init();\n    func();  //2\n    func();  //3\n    func();  //4\n    \n\na并没有在func调用完成后销毁，而是一直保存在内存中。init是匿名函数的父级，匿名函数被赋值给全局变量，会一直存在于内存中。所以init函数也会存在于内存之中。\n\n大量的使用闭包会占用大量的内存，可能会导致内存泄漏，所以在退出函数之前删除局部变量。\n\n    function init() {\n      var a = 1;\n      return {\n        add: function() {\n          a += 1;\n          console.log(a);\n        },\n        clear: function() {\n          a = undefined;\n        }\n      } \n    }\n    var func = init();\n    func.add();  //2\n    func.clear(); \n    func.add(); //NaN\n    \n\n要避免大量的使用闭包，在模拟私有方法的时候可以考虑用let关键词。","slug":"js闭包","published":1,"updated":"2018-12-08T09:20:07.058Z","layout":"post","photos":[],"link":"","_id":"cjpf91v43000k0iv10agaf0vo","content":"<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>词法作用域中使用的域，是变量在代码中声明的位置所决定的。嵌套的函数可以访问在其外部声明的变量。</p>\n<pre><code>var a = 100;\nfunction init() {\n  var b = 101;\n  console.log(&quot;init a:&quot; + a);\n  function display() {\n    console.log(&quot;display a:&quot; + a);\n    console.log(&quot;display b:&quot; + b);\n  }  \n  display();\n}\ninit();\n</code></pre><p>运行结果：</p>\n<pre><code>init a:100\ndisplay a:100\ndisplay b:101\n</code></pre><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>闭包能够读取其他函数内部变量。允许将函数与其所操作的某些数据（环境）关联起来。</p>\n<p>举个列子</p>\n<pre><code>function add(a) {\n  return function(b) {\n    a = a + b\n    console.log(a)\n  }\n}\nvar add3 = add(100);\nvar add10 = add(110);\nadd3(3);  //103\nadd10(10);  //120\n</code></pre><p>add3和add10都是闭包。它们共享相同的函数定义，但是保存了不同的词法环境。在add3的环境中，a为3。而在add10中，a则为10。</p>\n<p>闭包可以使变量的值始终保持在内存中。</p>\n<pre><code>function init() {\n  var a = 1;\n  return function() {\n    a += 1;\n    console.log(a);\n  }\n}\n\nvar func = init();\nfunc();  //2\nfunc();  //3\nfunc();  //4\n</code></pre><p>a并没有在func调用完成后销毁，而是一直保存在内存中。init是匿名函数的父级，匿名函数被赋值给全局变量，会一直存在于内存中。所以init函数也会存在于内存之中。</p>\n<p>大量的使用闭包会占用大量的内存，可能会导致内存泄漏，所以在退出函数之前删除局部变量。</p>\n<pre><code>function init() {\n  var a = 1;\n  return {\n    add: function() {\n      a += 1;\n      console.log(a);\n    },\n    clear: function() {\n      a = undefined;\n    }\n  } \n}\nvar func = init();\nfunc.add();  //2\nfunc.clear(); \nfunc.add(); //NaN\n</code></pre><p>要避免大量的使用闭包，在模拟私有方法的时候可以考虑用let关键词。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>词法作用域中使用的域，是变量在代码中声明的位置所决定的。嵌套的函数可以访问在其外部声明的变量。</p>\n<pre><code>var a = 100;\nfunction init() {\n  var b = 101;\n  console.log(&quot;init a:&quot; + a);\n  function display() {\n    console.log(&quot;display a:&quot; + a);\n    console.log(&quot;display b:&quot; + b);\n  }  \n  display();\n}\ninit();\n</code></pre><p>运行结果：</p>\n<pre><code>init a:100\ndisplay a:100\ndisplay b:101\n</code></pre><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>闭包能够读取其他函数内部变量。允许将函数与其所操作的某些数据（环境）关联起来。</p>\n<p>举个列子</p>\n<pre><code>function add(a) {\n  return function(b) {\n    a = a + b\n    console.log(a)\n  }\n}\nvar add3 = add(100);\nvar add10 = add(110);\nadd3(3);  //103\nadd10(10);  //120\n</code></pre><p>add3和add10都是闭包。它们共享相同的函数定义，但是保存了不同的词法环境。在add3的环境中，a为3。而在add10中，a则为10。</p>\n<p>闭包可以使变量的值始终保持在内存中。</p>\n<pre><code>function init() {\n  var a = 1;\n  return function() {\n    a += 1;\n    console.log(a);\n  }\n}\n\nvar func = init();\nfunc();  //2\nfunc();  //3\nfunc();  //4\n</code></pre><p>a并没有在func调用完成后销毁，而是一直保存在内存中。init是匿名函数的父级，匿名函数被赋值给全局变量，会一直存在于内存中。所以init函数也会存在于内存之中。</p>\n<p>大量的使用闭包会占用大量的内存，可能会导致内存泄漏，所以在退出函数之前删除局部变量。</p>\n<pre><code>function init() {\n  var a = 1;\n  return {\n    add: function() {\n      a += 1;\n      console.log(a);\n    },\n    clear: function() {\n      a = undefined;\n    }\n  } \n}\nvar func = init();\nfunc.add();  //2\nfunc.clear(); \nfunc.add(); //NaN\n</code></pre><p>要避免大量的使用闭包，在模拟私有方法的时候可以考虑用let关键词。</p>\n"},{"title":"vue结合express后台开发","date":"2018-05-04T09:22:29.000Z","comments":0,"description":"vue与express协同开发","_content":"\n最近打算写一个有即时通讯功能的app练手，用到之前使用过的`socket.io`库，所以需要`vue`与`express`同步协调api（一个人开发就不打算前后端分离了，方便即时调控）\n\n### 项目准备\n1.创建webpack模板(需要安装vue-cli)\n```\nvue init webpack demo\n```\n\n2.安装依赖\n```\ncd demo\nnpm install\n```\n\n3.修改文件结构  \n将`src`文件夹修改为`client`  \n将`webpack.base.conf.js`内的`src`地址修改为`client`\n\n4.创建服务端(需要安装express-generator)\n```\nexpress server\ncd server\nnpm install\n```\n5.修改文件结构  \n将 ***app.js*** 中\n`app.use(express.static(path.join(__dirname, 'public')));`\n修改为\n`app.use(express.static(path.resolve(__dirname, '../dist')));`\n\n### 打包部署\n```\ncd demo\nnpm run build\ncd server\nnpm start\n```\n\n访问`http://localhost:3000`\n","source":"_posts/vue结合express后台开发.md","raw":"---\ntitle: vue结合express后台开发\ndate: 2018-05-04 17:22:29\ncategories: vue\ntags: vue\ncomments: false\ndescription: vue与express协同开发\n---\n\n最近打算写一个有即时通讯功能的app练手，用到之前使用过的`socket.io`库，所以需要`vue`与`express`同步协调api（一个人开发就不打算前后端分离了，方便即时调控）\n\n### 项目准备\n1.创建webpack模板(需要安装vue-cli)\n```\nvue init webpack demo\n```\n\n2.安装依赖\n```\ncd demo\nnpm install\n```\n\n3.修改文件结构  \n将`src`文件夹修改为`client`  \n将`webpack.base.conf.js`内的`src`地址修改为`client`\n\n4.创建服务端(需要安装express-generator)\n```\nexpress server\ncd server\nnpm install\n```\n5.修改文件结构  \n将 ***app.js*** 中\n`app.use(express.static(path.join(__dirname, 'public')));`\n修改为\n`app.use(express.static(path.resolve(__dirname, '../dist')));`\n\n### 打包部署\n```\ncd demo\nnpm run build\ncd server\nnpm start\n```\n\n访问`http://localhost:3000`\n","slug":"vue结合express后台开发","published":1,"updated":"2018-12-06T06:33:13.025Z","layout":"post","photos":[],"link":"","_id":"cjpf91v47000n0iv1o4drvrn3","content":"<p>最近打算写一个有即时通讯功能的app练手，用到之前使用过的<code>socket.io</code>库，所以需要<code>vue</code>与<code>express</code>同步协调api（一个人开发就不打算前后端分离了，方便即时调控）</p>\n<h3 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h3><p>1.创建webpack模板(需要安装vue-cli)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack demo</span><br></pre></td></tr></table></figure></p>\n<p>2.安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd demo</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>3.修改文件结构<br>将<code>src</code>文件夹修改为<code>client</code><br>将<code>webpack.base.conf.js</code>内的<code>src</code>地址修改为<code>client</code></p>\n<p>4.创建服务端(需要安装express-generator)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express server</span><br><span class=\"line\">cd server</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>5.修改文件结构<br>将 <strong><em>app.js</em></strong> 中<br><code>app.use(express.static(path.join(__dirname, &#39;public&#39;)));</code><br>修改为<br><code>app.use(express.static(path.resolve(__dirname, &#39;../dist&#39;)));</code></p>\n<h3 id=\"打包部署\"><a href=\"#打包部署\" class=\"headerlink\" title=\"打包部署\"></a>打包部署</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd demo</span><br><span class=\"line\">npm run build</span><br><span class=\"line\">cd server</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>访问<code>http://localhost:3000</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近打算写一个有即时通讯功能的app练手，用到之前使用过的<code>socket.io</code>库，所以需要<code>vue</code>与<code>express</code>同步协调api（一个人开发就不打算前后端分离了，方便即时调控）</p>\n<h3 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h3><p>1.创建webpack模板(需要安装vue-cli)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack demo</span><br></pre></td></tr></table></figure></p>\n<p>2.安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd demo</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>3.修改文件结构<br>将<code>src</code>文件夹修改为<code>client</code><br>将<code>webpack.base.conf.js</code>内的<code>src</code>地址修改为<code>client</code></p>\n<p>4.创建服务端(需要安装express-generator)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express server</span><br><span class=\"line\">cd server</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>5.修改文件结构<br>将 <strong><em>app.js</em></strong> 中<br><code>app.use(express.static(path.join(__dirname, &#39;public&#39;)));</code><br>修改为<br><code>app.use(express.static(path.resolve(__dirname, &#39;../dist&#39;)));</code></p>\n<h3 id=\"打包部署\"><a href=\"#打包部署\" class=\"headerlink\" title=\"打包部署\"></a>打包部署</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd demo</span><br><span class=\"line\">npm run build</span><br><span class=\"line\">cd server</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>访问<code>http://localhost:3000</code></p>\n"},{"title":"vue与react组件对比","date":"2018-08-12T16:08:36.000Z","comments":0,"description":"vue与react数据绑定,DOM渲染,生命周期之间的对比","_content":"\n## 1.数据渲染\n### Vue\nVue采用了传统的 html 模板 通过`{% raw %}{{}}{% endraw %}`或者v-text语法来进行数据的渲染  \n对于数组数据 Vue 中使用类似 Smarty 语法的 `v-for`指令来渲染数组  \n可以使用computed来对需要渲染的数据进行处理\n\n### React\nReact通过`{}`将数据嵌套在JSX表达式中  \n对于数组数据 React利用`map`将数据片段映射成一段 JSX，然后在列表区域中直接引用`map`后的 JSX 变量来渲染数组数据  \nReact处理渲染的数据 需要 render 函数中定义一个新变量，将转换后的值赋给这个变量后 render \n\n\n__渲染数组 以数组 a 为例__  \nVue\n\n    <p v-for=\"num in a\">{{num}}</p>\n\nReact\n\n    render() {\n        {a.map((num) => \n            <p>{num}</p>\n        )}\n    }  \n\n  \n## 2.数据更新\n### Vue  \n由于Vue和React实现原理不同所以数据更新的方式也不同  \nVue Hack 了对象的 setter getter \n赋值操作时可以setter直接获知状态树中的修改位置\n\n    this.age = 18\n\n__Vue 中数据状态的更新是即时的 DOM状态是异步更新的__  \n有些时候需要在数据变动 DOM重渲染完做一些操作需要用`Vue.nextTick(callback)` DOM 更新完成后就会调用\n\n### React  \nReact 需要显式 setState 来获知变更的内容触发DOM的重渲染 \n\n    this.setState({ age: 18 })\n\n__React 中 DOM 状态和数据状态都是异步更新的__\n\n## 3.数据的双向绑定\n### Vue\nVue提供了`v-model`语法对 input 数据进行双向绑定 本质上是v-bind绑定事件和v-on监听事件组成的语法糖\n\n### React\nReact语法 进行数据绑定 onChange事件进行监听数据变化\n\n## 4.事件传递\n### Vue\n> Vue 通过v-on和$emit来实现的。在父组件模板中声明子组件时，通过 `v-on:childEventName=\"parentHandler\"` 语法来指定对子组件特定名称事件的 Handler method\n\n### React\n> React Handler 同样是在父组件中声明，但 Handler 需要以 props 的形式传入子组件，在子组件中触发事件时，以 `this.props.parentHandler` 形式调用父组件传入的 props 状态\n\n## 5.生命周期\n### Vue\n\n{% asset_img vue.png %}\n\n>Vue destroyed 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n不会清除已有DOM。\n\n### React\n\n{% asset_img react.png %}  \n\n图片来源   (https://huanghui8030.github.io/react/component.html)\n>React 卸载后不会清除组件的实例 需要在componentWillUnmount生命钩子手动清除  \n\n例如ajax的数据还没获取到就dom就已经不存在，会产生报错\n>Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Timer component.\n\n所以需要在 componentWillUnmount() 手动清除\n\n    componentWillUnmount(){\n        this.setState=()=>{};\n    }\n\n","source":"_posts/vue与react组件对比.md","raw":"---\ntitle:  vue与react组件对比\ndate: 2018-08-13 00:08:36\ntags: [vue, react]\ncategories: JavaScript\ncomments: false\ndescription: vue与react数据绑定,DOM渲染,生命周期之间的对比\n---\n\n## 1.数据渲染\n### Vue\nVue采用了传统的 html 模板 通过`{% raw %}{{}}{% endraw %}`或者v-text语法来进行数据的渲染  \n对于数组数据 Vue 中使用类似 Smarty 语法的 `v-for`指令来渲染数组  \n可以使用computed来对需要渲染的数据进行处理\n\n### React\nReact通过`{}`将数据嵌套在JSX表达式中  \n对于数组数据 React利用`map`将数据片段映射成一段 JSX，然后在列表区域中直接引用`map`后的 JSX 变量来渲染数组数据  \nReact处理渲染的数据 需要 render 函数中定义一个新变量，将转换后的值赋给这个变量后 render \n\n\n__渲染数组 以数组 a 为例__  \nVue\n\n    <p v-for=\"num in a\">{{num}}</p>\n\nReact\n\n    render() {\n        {a.map((num) => \n            <p>{num}</p>\n        )}\n    }  \n\n  \n## 2.数据更新\n### Vue  \n由于Vue和React实现原理不同所以数据更新的方式也不同  \nVue Hack 了对象的 setter getter \n赋值操作时可以setter直接获知状态树中的修改位置\n\n    this.age = 18\n\n__Vue 中数据状态的更新是即时的 DOM状态是异步更新的__  \n有些时候需要在数据变动 DOM重渲染完做一些操作需要用`Vue.nextTick(callback)` DOM 更新完成后就会调用\n\n### React  \nReact 需要显式 setState 来获知变更的内容触发DOM的重渲染 \n\n    this.setState({ age: 18 })\n\n__React 中 DOM 状态和数据状态都是异步更新的__\n\n## 3.数据的双向绑定\n### Vue\nVue提供了`v-model`语法对 input 数据进行双向绑定 本质上是v-bind绑定事件和v-on监听事件组成的语法糖\n\n### React\nReact语法 进行数据绑定 onChange事件进行监听数据变化\n\n## 4.事件传递\n### Vue\n> Vue 通过v-on和$emit来实现的。在父组件模板中声明子组件时，通过 `v-on:childEventName=\"parentHandler\"` 语法来指定对子组件特定名称事件的 Handler method\n\n### React\n> React Handler 同样是在父组件中声明，但 Handler 需要以 props 的形式传入子组件，在子组件中触发事件时，以 `this.props.parentHandler` 形式调用父组件传入的 props 状态\n\n## 5.生命周期\n### Vue\n\n{% asset_img vue.png %}\n\n>Vue destroyed 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n不会清除已有DOM。\n\n### React\n\n{% asset_img react.png %}  \n\n图片来源   (https://huanghui8030.github.io/react/component.html)\n>React 卸载后不会清除组件的实例 需要在componentWillUnmount生命钩子手动清除  \n\n例如ajax的数据还没获取到就dom就已经不存在，会产生报错\n>Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Timer component.\n\n所以需要在 componentWillUnmount() 手动清除\n\n    componentWillUnmount(){\n        this.setState=()=>{};\n    }\n\n","slug":"vue与react组件对比","published":1,"updated":"2018-12-06T06:33:11.461Z","layout":"post","photos":[],"link":"","_id":"cjpf91v4k000p0iv1kkoqbl2h","content":"<h2 id=\"1-数据渲染\"><a href=\"#1-数据渲染\" class=\"headerlink\" title=\"1.数据渲染\"></a>1.数据渲染</h2><h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>Vue采用了传统的 html 模板 通过<code>{{}}</code>或者v-text语法来进行数据的渲染<br>对于数组数据 Vue 中使用类似 Smarty 语法的 <code>v-for</code>指令来渲染数组<br>可以使用computed来对需要渲染的数据进行处理</p>\n<h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React通过<code>{}</code>将数据嵌套在JSX表达式中<br>对于数组数据 React利用<code>map</code>将数据片段映射成一段 JSX，然后在列表区域中直接引用<code>map</code>后的 JSX 变量来渲染数组数据<br>React处理渲染的数据 需要 render 函数中定义一个新变量，将转换后的值赋给这个变量后 render </p>\n<p><strong>渲染数组 以数组 a 为例</strong><br>Vue</p>\n<pre><code>&lt;p v-for=&quot;num in a&quot;&gt;{{num}}&lt;/p&gt;\n</code></pre><p>React</p>\n<pre><code>render() {\n    {a.map((num) =&gt; \n        &lt;p&gt;{num}&lt;/p&gt;\n    )}\n}  \n</code></pre><h2 id=\"2-数据更新\"><a href=\"#2-数据更新\" class=\"headerlink\" title=\"2.数据更新\"></a>2.数据更新</h2><h3 id=\"Vue-1\"><a href=\"#Vue-1\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>由于Vue和React实现原理不同所以数据更新的方式也不同<br>Vue Hack 了对象的 setter getter<br>赋值操作时可以setter直接获知状态树中的修改位置</p>\n<pre><code>this.age = 18\n</code></pre><p><strong>Vue 中数据状态的更新是即时的 DOM状态是异步更新的</strong><br>有些时候需要在数据变动 DOM重渲染完做一些操作需要用<code>Vue.nextTick(callback)</code> DOM 更新完成后就会调用</p>\n<h3 id=\"React-1\"><a href=\"#React-1\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React 需要显式 setState 来获知变更的内容触发DOM的重渲染 </p>\n<pre><code>this.setState({ age: 18 })\n</code></pre><p><strong>React 中 DOM 状态和数据状态都是异步更新的</strong></p>\n<h2 id=\"3-数据的双向绑定\"><a href=\"#3-数据的双向绑定\" class=\"headerlink\" title=\"3.数据的双向绑定\"></a>3.数据的双向绑定</h2><h3 id=\"Vue-2\"><a href=\"#Vue-2\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>Vue提供了<code>v-model</code>语法对 input 数据进行双向绑定 本质上是v-bind绑定事件和v-on监听事件组成的语法糖</p>\n<h3 id=\"React-2\"><a href=\"#React-2\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React语法 进行数据绑定 onChange事件进行监听数据变化</p>\n<h2 id=\"4-事件传递\"><a href=\"#4-事件传递\" class=\"headerlink\" title=\"4.事件传递\"></a>4.事件传递</h2><h3 id=\"Vue-3\"><a href=\"#Vue-3\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><blockquote>\n<p>Vue 通过v-on和$emit来实现的。在父组件模板中声明子组件时，通过 <code>v-on:childEventName=&quot;parentHandler&quot;</code> 语法来指定对子组件特定名称事件的 Handler method</p>\n</blockquote>\n<h3 id=\"React-3\"><a href=\"#React-3\" class=\"headerlink\" title=\"React\"></a>React</h3><blockquote>\n<p>React Handler 同样是在父组件中声明，但 Handler 需要以 props 的形式传入子组件，在子组件中触发事件时，以 <code>this.props.parentHandler</code> 形式调用父组件传入的 props 状态</p>\n</blockquote>\n<h2 id=\"5-生命周期\"><a href=\"#5-生命周期\" class=\"headerlink\" title=\"5.生命周期\"></a>5.生命周期</h2><h3 id=\"Vue-4\"><a href=\"#Vue-4\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><img src=\"/blog/2018/08/13/vue与react组件对比/vue.png\">\n<blockquote>\n<p>Vue destroyed 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<br>不会清除已有DOM。</p>\n</blockquote>\n<h3 id=\"React-4\"><a href=\"#React-4\" class=\"headerlink\" title=\"React\"></a>React</h3><img src=\"/blog/2018/08/13/vue与react组件对比/react.png\">  \n<p>图片来源   (<a href=\"https://huanghui8030.github.io/react/component.html\" target=\"_blank\" rel=\"noopener\">https://huanghui8030.github.io/react/component.html</a>)</p>\n<blockquote>\n<p>React 卸载后不会清除组件的实例 需要在componentWillUnmount生命钩子手动清除  </p>\n</blockquote>\n<p>例如ajax的数据还没获取到就dom就已经不存在，会产生报错</p>\n<blockquote>\n<p>Warning: setState(…): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Timer component.</p>\n</blockquote>\n<p>所以需要在 componentWillUnmount() 手动清除</p>\n<pre><code>componentWillUnmount(){\n    this.setState=()=&gt;{};\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-数据渲染\"><a href=\"#1-数据渲染\" class=\"headerlink\" title=\"1.数据渲染\"></a>1.数据渲染</h2><h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>Vue采用了传统的 html 模板 通过<code>{{}}</code>或者v-text语法来进行数据的渲染<br>对于数组数据 Vue 中使用类似 Smarty 语法的 <code>v-for</code>指令来渲染数组<br>可以使用computed来对需要渲染的数据进行处理</p>\n<h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React通过<code>{}</code>将数据嵌套在JSX表达式中<br>对于数组数据 React利用<code>map</code>将数据片段映射成一段 JSX，然后在列表区域中直接引用<code>map</code>后的 JSX 变量来渲染数组数据<br>React处理渲染的数据 需要 render 函数中定义一个新变量，将转换后的值赋给这个变量后 render </p>\n<p><strong>渲染数组 以数组 a 为例</strong><br>Vue</p>\n<pre><code>&lt;p v-for=&quot;num in a&quot;&gt;{{num}}&lt;/p&gt;\n</code></pre><p>React</p>\n<pre><code>render() {\n    {a.map((num) =&gt; \n        &lt;p&gt;{num}&lt;/p&gt;\n    )}\n}  \n</code></pre><h2 id=\"2-数据更新\"><a href=\"#2-数据更新\" class=\"headerlink\" title=\"2.数据更新\"></a>2.数据更新</h2><h3 id=\"Vue-1\"><a href=\"#Vue-1\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>由于Vue和React实现原理不同所以数据更新的方式也不同<br>Vue Hack 了对象的 setter getter<br>赋值操作时可以setter直接获知状态树中的修改位置</p>\n<pre><code>this.age = 18\n</code></pre><p><strong>Vue 中数据状态的更新是即时的 DOM状态是异步更新的</strong><br>有些时候需要在数据变动 DOM重渲染完做一些操作需要用<code>Vue.nextTick(callback)</code> DOM 更新完成后就会调用</p>\n<h3 id=\"React-1\"><a href=\"#React-1\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React 需要显式 setState 来获知变更的内容触发DOM的重渲染 </p>\n<pre><code>this.setState({ age: 18 })\n</code></pre><p><strong>React 中 DOM 状态和数据状态都是异步更新的</strong></p>\n<h2 id=\"3-数据的双向绑定\"><a href=\"#3-数据的双向绑定\" class=\"headerlink\" title=\"3.数据的双向绑定\"></a>3.数据的双向绑定</h2><h3 id=\"Vue-2\"><a href=\"#Vue-2\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>Vue提供了<code>v-model</code>语法对 input 数据进行双向绑定 本质上是v-bind绑定事件和v-on监听事件组成的语法糖</p>\n<h3 id=\"React-2\"><a href=\"#React-2\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React语法 进行数据绑定 onChange事件进行监听数据变化</p>\n<h2 id=\"4-事件传递\"><a href=\"#4-事件传递\" class=\"headerlink\" title=\"4.事件传递\"></a>4.事件传递</h2><h3 id=\"Vue-3\"><a href=\"#Vue-3\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><blockquote>\n<p>Vue 通过v-on和$emit来实现的。在父组件模板中声明子组件时，通过 <code>v-on:childEventName=&quot;parentHandler&quot;</code> 语法来指定对子组件特定名称事件的 Handler method</p>\n</blockquote>\n<h3 id=\"React-3\"><a href=\"#React-3\" class=\"headerlink\" title=\"React\"></a>React</h3><blockquote>\n<p>React Handler 同样是在父组件中声明，但 Handler 需要以 props 的形式传入子组件，在子组件中触发事件时，以 <code>this.props.parentHandler</code> 形式调用父组件传入的 props 状态</p>\n</blockquote>\n<h2 id=\"5-生命周期\"><a href=\"#5-生命周期\" class=\"headerlink\" title=\"5.生命周期\"></a>5.生命周期</h2><h3 id=\"Vue-4\"><a href=\"#Vue-4\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><img src=\"/blog/2018/08/13/vue与react组件对比/vue.png\">\n<blockquote>\n<p>Vue destroyed 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<br>不会清除已有DOM。</p>\n</blockquote>\n<h3 id=\"React-4\"><a href=\"#React-4\" class=\"headerlink\" title=\"React\"></a>React</h3><img src=\"/blog/2018/08/13/vue与react组件对比/react.png\">  \n<p>图片来源   (<a href=\"https://huanghui8030.github.io/react/component.html\" target=\"_blank\" rel=\"noopener\">https://huanghui8030.github.io/react/component.html</a>)</p>\n<blockquote>\n<p>React 卸载后不会清除组件的实例 需要在componentWillUnmount生命钩子手动清除  </p>\n</blockquote>\n<p>例如ajax的数据还没获取到就dom就已经不存在，会产生报错</p>\n<blockquote>\n<p>Warning: setState(…): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Timer component.</p>\n</blockquote>\n<p>所以需要在 componentWillUnmount() 手动清除</p>\n<pre><code>componentWillUnmount(){\n    this.setState=()=&gt;{};\n}\n</code></pre>"},{"title":"数组随机排列","date":"2018-04-02T11:20:11.000Z","comments":0,"description":"洗牌算法的正确实现","_content":"### 错误示例\n\n    function shuffle(arr){\n        return arr.sort(function(){\n            return Math.random() - 0.5;\n        });\n    }\n\n#### 证明\n假设一个数组为 [0,1,2,3,4,5,6,7,8,9]\n如果该算法正确，每个数在每个位置的概率相等且为1 / 10 。\n将数组重复洗牌足够多次，然后将每次的结果在每一位相加，最后对每一位的结果取平均值，这个平均值应该约等于 (0 + 9) / 2 = 4.5，测试次数越多次，每一位上的平均值就都应该越接近于 4.5 。\n\n    var arr = [0,1,2,3,4,5,6,7,8,9];\n    var res = [0,0,0,0,0,0,0,0,0,0];\n\n    var time = 10000;\n    for(var i = 0; i < time; i++){\n        var sorted = shuffle(arr.slice(0));\n        sorted.forEach(function(value,index){\n            res[index] += value;\n        });\n    }\n\n    res = res.map(function(value){\n        return value / time;\n    });\n\n    console.log(res);\n\n在chrome测试这段代码,可以得出结果，发现结果并不随机分布，各个位置的平均值越往后越大，这意味着这种随机算法越大的数字出现在越后面的概率越大。\nsort随机算法中元素之间的比较次数通常情况下要远小于正常的 n(n-1)/2，也就意味着有一些元素之间根本就没机会相比较（也就没有了随机交换的可能），这些 sort 随机排序的算法自然也不能真正随机。\n\n### 经典洗牌算法Fisher－Yates Shuffle\n\n    function shuffle(arr){\n        var len = arr.length;\n        for(var i = 0; i < len - 1; i++){\n            var idx = Math.floor(Math.random() * (len - i));\n            var temp = arr[idx];\n            arr[idx] = arr[len - i - 1];\n            arr[len - i -1] = temp;\n        }\n        return arr;\n    }\n\n#### 原理\n1. 选中数组的最后一个元素\n2. 确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围\n3. 从中随机挑选一个数\n4. 交换最后一个元素和随机选中的元素的值\n5. 接下来选中数组内倒数第二的元素\n6. 确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围，从中随机挑选一个数\n7. 接着交换倒数第二个元素和第6步随机选中的元素的值，完成对倒数第二个元素随机排列的处理。然后是选中倒数第三个元素，重复之前的操作\n\n> 引用自：\n    https://www.kirupa.com/html5/shuffling_array_js.htm\n    https://www.h5jun.com/post/array-shuffle.html","source":"_posts/数组随机排列.md","raw":"---\ntitle: 数组随机排列\ndate: 2018-04-02 19:20:11\ncategories: JavaScript\ntags: 算法\ncomments: false\ndescription: 洗牌算法的正确实现\n---\n### 错误示例\n\n    function shuffle(arr){\n        return arr.sort(function(){\n            return Math.random() - 0.5;\n        });\n    }\n\n#### 证明\n假设一个数组为 [0,1,2,3,4,5,6,7,8,9]\n如果该算法正确，每个数在每个位置的概率相等且为1 / 10 。\n将数组重复洗牌足够多次，然后将每次的结果在每一位相加，最后对每一位的结果取平均值，这个平均值应该约等于 (0 + 9) / 2 = 4.5，测试次数越多次，每一位上的平均值就都应该越接近于 4.5 。\n\n    var arr = [0,1,2,3,4,5,6,7,8,9];\n    var res = [0,0,0,0,0,0,0,0,0,0];\n\n    var time = 10000;\n    for(var i = 0; i < time; i++){\n        var sorted = shuffle(arr.slice(0));\n        sorted.forEach(function(value,index){\n            res[index] += value;\n        });\n    }\n\n    res = res.map(function(value){\n        return value / time;\n    });\n\n    console.log(res);\n\n在chrome测试这段代码,可以得出结果，发现结果并不随机分布，各个位置的平均值越往后越大，这意味着这种随机算法越大的数字出现在越后面的概率越大。\nsort随机算法中元素之间的比较次数通常情况下要远小于正常的 n(n-1)/2，也就意味着有一些元素之间根本就没机会相比较（也就没有了随机交换的可能），这些 sort 随机排序的算法自然也不能真正随机。\n\n### 经典洗牌算法Fisher－Yates Shuffle\n\n    function shuffle(arr){\n        var len = arr.length;\n        for(var i = 0; i < len - 1; i++){\n            var idx = Math.floor(Math.random() * (len - i));\n            var temp = arr[idx];\n            arr[idx] = arr[len - i - 1];\n            arr[len - i -1] = temp;\n        }\n        return arr;\n    }\n\n#### 原理\n1. 选中数组的最后一个元素\n2. 确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围\n3. 从中随机挑选一个数\n4. 交换最后一个元素和随机选中的元素的值\n5. 接下来选中数组内倒数第二的元素\n6. 确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围，从中随机挑选一个数\n7. 接着交换倒数第二个元素和第6步随机选中的元素的值，完成对倒数第二个元素随机排列的处理。然后是选中倒数第三个元素，重复之前的操作\n\n> 引用自：\n    https://www.kirupa.com/html5/shuffling_array_js.htm\n    https://www.h5jun.com/post/array-shuffle.html","slug":"数组随机排列","published":1,"updated":"2018-12-06T06:33:18.601Z","layout":"post","photos":[],"link":"","_id":"cjpf91v4t000t0iv1zt14nc5p","content":"<h3 id=\"错误示例\"><a href=\"#错误示例\" class=\"headerlink\" title=\"错误示例\"></a>错误示例</h3><pre><code>function shuffle(arr){\n    return arr.sort(function(){\n        return Math.random() - 0.5;\n    });\n}\n</code></pre><h4 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h4><p>假设一个数组为 [0,1,2,3,4,5,6,7,8,9]<br>如果该算法正确，每个数在每个位置的概率相等且为1 / 10 。<br>将数组重复洗牌足够多次，然后将每次的结果在每一位相加，最后对每一位的结果取平均值，这个平均值应该约等于 (0 + 9) / 2 = 4.5，测试次数越多次，每一位上的平均值就都应该越接近于 4.5 。</p>\n<pre><code>var arr = [0,1,2,3,4,5,6,7,8,9];\nvar res = [0,0,0,0,0,0,0,0,0,0];\n\nvar time = 10000;\nfor(var i = 0; i &lt; time; i++){\n    var sorted = shuffle(arr.slice(0));\n    sorted.forEach(function(value,index){\n        res[index] += value;\n    });\n}\n\nres = res.map(function(value){\n    return value / time;\n});\n\nconsole.log(res);\n</code></pre><p>在chrome测试这段代码,可以得出结果，发现结果并不随机分布，各个位置的平均值越往后越大，这意味着这种随机算法越大的数字出现在越后面的概率越大。<br>sort随机算法中元素之间的比较次数通常情况下要远小于正常的 n(n-1)/2，也就意味着有一些元素之间根本就没机会相比较（也就没有了随机交换的可能），这些 sort 随机排序的算法自然也不能真正随机。</p>\n<h3 id=\"经典洗牌算法Fisher－Yates-Shuffle\"><a href=\"#经典洗牌算法Fisher－Yates-Shuffle\" class=\"headerlink\" title=\"经典洗牌算法Fisher－Yates Shuffle\"></a>经典洗牌算法Fisher－Yates Shuffle</h3><pre><code>function shuffle(arr){\n    var len = arr.length;\n    for(var i = 0; i &lt; len - 1; i++){\n        var idx = Math.floor(Math.random() * (len - i));\n        var temp = arr[idx];\n        arr[idx] = arr[len - i - 1];\n        arr[len - i -1] = temp;\n    }\n    return arr;\n}\n</code></pre><h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><ol>\n<li>选中数组的最后一个元素</li>\n<li>确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围</li>\n<li>从中随机挑选一个数</li>\n<li>交换最后一个元素和随机选中的元素的值</li>\n<li>接下来选中数组内倒数第二的元素</li>\n<li>确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围，从中随机挑选一个数</li>\n<li>接着交换倒数第二个元素和第6步随机选中的元素的值，完成对倒数第二个元素随机排列的处理。然后是选中倒数第三个元素，重复之前的操作</li>\n</ol>\n<blockquote>\n<p>引用自：<br>    <a href=\"https://www.kirupa.com/html5/shuffling_array_js.htm\" target=\"_blank\" rel=\"noopener\">https://www.kirupa.com/html5/shuffling_array_js.htm</a><br>    <a href=\"https://www.h5jun.com/post/array-shuffle.html\" target=\"_blank\" rel=\"noopener\">https://www.h5jun.com/post/array-shuffle.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"错误示例\"><a href=\"#错误示例\" class=\"headerlink\" title=\"错误示例\"></a>错误示例</h3><pre><code>function shuffle(arr){\n    return arr.sort(function(){\n        return Math.random() - 0.5;\n    });\n}\n</code></pre><h4 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h4><p>假设一个数组为 [0,1,2,3,4,5,6,7,8,9]<br>如果该算法正确，每个数在每个位置的概率相等且为1 / 10 。<br>将数组重复洗牌足够多次，然后将每次的结果在每一位相加，最后对每一位的结果取平均值，这个平均值应该约等于 (0 + 9) / 2 = 4.5，测试次数越多次，每一位上的平均值就都应该越接近于 4.5 。</p>\n<pre><code>var arr = [0,1,2,3,4,5,6,7,8,9];\nvar res = [0,0,0,0,0,0,0,0,0,0];\n\nvar time = 10000;\nfor(var i = 0; i &lt; time; i++){\n    var sorted = shuffle(arr.slice(0));\n    sorted.forEach(function(value,index){\n        res[index] += value;\n    });\n}\n\nres = res.map(function(value){\n    return value / time;\n});\n\nconsole.log(res);\n</code></pre><p>在chrome测试这段代码,可以得出结果，发现结果并不随机分布，各个位置的平均值越往后越大，这意味着这种随机算法越大的数字出现在越后面的概率越大。<br>sort随机算法中元素之间的比较次数通常情况下要远小于正常的 n(n-1)/2，也就意味着有一些元素之间根本就没机会相比较（也就没有了随机交换的可能），这些 sort 随机排序的算法自然也不能真正随机。</p>\n<h3 id=\"经典洗牌算法Fisher－Yates-Shuffle\"><a href=\"#经典洗牌算法Fisher－Yates-Shuffle\" class=\"headerlink\" title=\"经典洗牌算法Fisher－Yates Shuffle\"></a>经典洗牌算法Fisher－Yates Shuffle</h3><pre><code>function shuffle(arr){\n    var len = arr.length;\n    for(var i = 0; i &lt; len - 1; i++){\n        var idx = Math.floor(Math.random() * (len - i));\n        var temp = arr[idx];\n        arr[idx] = arr[len - i - 1];\n        arr[len - i -1] = temp;\n    }\n    return arr;\n}\n</code></pre><h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><ol>\n<li>选中数组的最后一个元素</li>\n<li>确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围</li>\n<li>从中随机挑选一个数</li>\n<li>交换最后一个元素和随机选中的元素的值</li>\n<li>接下来选中数组内倒数第二的元素</li>\n<li>确定挑选随机元素的范围，从数组的第一个元素到上一步选中的元素都属于这一范围，从中随机挑选一个数</li>\n<li>接着交换倒数第二个元素和第6步随机选中的元素的值，完成对倒数第二个元素随机排列的处理。然后是选中倒数第三个元素，重复之前的操作</li>\n</ol>\n<blockquote>\n<p>引用自：<br>    <a href=\"https://www.kirupa.com/html5/shuffling_array_js.htm\" target=\"_blank\" rel=\"noopener\">https://www.kirupa.com/html5/shuffling_array_js.htm</a><br>    <a href=\"https://www.h5jun.com/post/array-shuffle.html\" target=\"_blank\" rel=\"noopener\">https://www.h5jun.com/post/array-shuffle.html</a></p>\n</blockquote>\n"},{"title":"网站部署","date":"2018-03-23T09:27:03.000Z","comments":0,"description":"记录网站部署至Ubuntu的过程","_content":"### 部署准备\n#### 连接server\nWindows环境 xshell + winscp\nUbuntu环境 ssh + filezilla\n安装SSH\n\n    sudo apt-get install openssh-server\n\n安装好后查看SSH是否启动 \n\n    sudo ps -e |grep ssh\n\n有sshd,说明ssh服务已经启动，如果没有启动，输入”sudo service ssh start“\n\n连接服务器\n\n    ssh user@host  如：ssh root@192.168.0.111\n\n\n#### Ubuntu server环境搭建\n##### node.js源码安装\n\n    cd /home\n    wget https://nodejs.org/dist/v9.9.0/node-v9.9.0.tar.gz\n    tar -xvf node-v9.9.0.tar.gz\n    cd node-v9.9.0\n    ./configure\n    sudo make & make install\n\n> 对于Ubuntu 16.04.1服务器，默认的Python版本是3.5，默认情况下不安装Python 2.7，甚至没有python可执行文件\n  \n./configure 会出现报错\n\n    ./configure: 4: exec: python: not found\n\n安装依赖\n>https://askubuntu.com/questions/101591/how-do-i-install-the-latest-python-2-7-x-or-3-x-on-ubuntu\n    \n    sudo apt-get install build-essential checkinstall\n    sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev\n\n> 确保make、gcc、g++已经安装好，均使用apt-get的方式直接装\n\n安装python\n\n    sudo apt-get install python2.7\n\n##### nginx安装\n\n    sudo apt-get install nginx\n\n##### hexo安装\n\n    npm install -g hexo-cli\n##### pm2安装\n\n    npm install -g pm2\n\n##### git & github\n\n    sudo apt-get install git\n\n> 引用廖雪峰git教程\n\n> 自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：\n\n> 第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件。\n\n    cd ~/.ssh\n    ls\n    id_rsa          id_rsa.pub      known_hosts\n    cat id_rsa.pub\n    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVRgHi3gPdBcQ... youremail@example.com\n\n\n> 如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n    ssh-keygen -t rsa -C \"youremail@example.com\"\n\n> 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n> 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容\n点“Add Key”，你就应该看到已经添加的Key\n\n### 网站搭建\n#### 上传网站和博客至服务器\nFTP or github clone\n\n    git clone git@github.com:recallwolf/blog\n\n#### 安装依赖启动express服务\n    npm install\n    pm2 start ./bin/www\n\n现在已经可以通过服务器外网ip+端口号访问网站了\n\n#### hexo博客生成\n    cd blog\n    npm install\n    hexo generate\n    \n生成public\n更新博文上传至github后\n\n    cd blog\n    git pull git@github.com:recallwolf/blog\n    npm install\n    hexo generate\n    \n\n#### nginx端口映射转发流量\n配置文件位于/etc/nginx/sites-available\n\n    server {\n        listen 80;\n        server_name www.rwnexus.site;\n\n        location / {\n            proxy_pass http://127.0.0.1:3000; # 端口映射\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $server_name;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_cache_bypass $http_upgrade;\n            proxy_ssl_name $server_name;\n        }\n        location /blog {\n            alias /home/blog/public; # 静态博客入口文件目录\n            index index.html;\n        }\n        error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n            root /usr/share/nginx/html;\n        }\n    }\n\n重载nginx配置文件\n\n    nginx -s reload\n\n**现在可以使用  www.rwnexus.site　访问网站，www.rwnexus.site/blog　访问博客**","source":"_posts/网站部署.md","raw":"---\ntitle: 网站部署\ndate: 2018-03-23 17:27:03\ncategories: Ubuntu\ntags: Ubuntu\ncomments: false\ndescription: 记录网站部署至Ubuntu的过程\n---\n### 部署准备\n#### 连接server\nWindows环境 xshell + winscp\nUbuntu环境 ssh + filezilla\n安装SSH\n\n    sudo apt-get install openssh-server\n\n安装好后查看SSH是否启动 \n\n    sudo ps -e |grep ssh\n\n有sshd,说明ssh服务已经启动，如果没有启动，输入”sudo service ssh start“\n\n连接服务器\n\n    ssh user@host  如：ssh root@192.168.0.111\n\n\n#### Ubuntu server环境搭建\n##### node.js源码安装\n\n    cd /home\n    wget https://nodejs.org/dist/v9.9.0/node-v9.9.0.tar.gz\n    tar -xvf node-v9.9.0.tar.gz\n    cd node-v9.9.0\n    ./configure\n    sudo make & make install\n\n> 对于Ubuntu 16.04.1服务器，默认的Python版本是3.5，默认情况下不安装Python 2.7，甚至没有python可执行文件\n  \n./configure 会出现报错\n\n    ./configure: 4: exec: python: not found\n\n安装依赖\n>https://askubuntu.com/questions/101591/how-do-i-install-the-latest-python-2-7-x-or-3-x-on-ubuntu\n    \n    sudo apt-get install build-essential checkinstall\n    sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev\n\n> 确保make、gcc、g++已经安装好，均使用apt-get的方式直接装\n\n安装python\n\n    sudo apt-get install python2.7\n\n##### nginx安装\n\n    sudo apt-get install nginx\n\n##### hexo安装\n\n    npm install -g hexo-cli\n##### pm2安装\n\n    npm install -g pm2\n\n##### git & github\n\n    sudo apt-get install git\n\n> 引用廖雪峰git教程\n\n> 自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：\n\n> 第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件。\n\n    cd ~/.ssh\n    ls\n    id_rsa          id_rsa.pub      known_hosts\n    cat id_rsa.pub\n    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVRgHi3gPdBcQ... youremail@example.com\n\n\n> 如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n    ssh-keygen -t rsa -C \"youremail@example.com\"\n\n> 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n> 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容\n点“Add Key”，你就应该看到已经添加的Key\n\n### 网站搭建\n#### 上传网站和博客至服务器\nFTP or github clone\n\n    git clone git@github.com:recallwolf/blog\n\n#### 安装依赖启动express服务\n    npm install\n    pm2 start ./bin/www\n\n现在已经可以通过服务器外网ip+端口号访问网站了\n\n#### hexo博客生成\n    cd blog\n    npm install\n    hexo generate\n    \n生成public\n更新博文上传至github后\n\n    cd blog\n    git pull git@github.com:recallwolf/blog\n    npm install\n    hexo generate\n    \n\n#### nginx端口映射转发流量\n配置文件位于/etc/nginx/sites-available\n\n    server {\n        listen 80;\n        server_name www.rwnexus.site;\n\n        location / {\n            proxy_pass http://127.0.0.1:3000; # 端口映射\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $server_name;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_cache_bypass $http_upgrade;\n            proxy_ssl_name $server_name;\n        }\n        location /blog {\n            alias /home/blog/public; # 静态博客入口文件目录\n            index index.html;\n        }\n        error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n            root /usr/share/nginx/html;\n        }\n    }\n\n重载nginx配置文件\n\n    nginx -s reload\n\n**现在可以使用  www.rwnexus.site　访问网站，www.rwnexus.site/blog　访问博客**","slug":"网站部署","published":1,"updated":"2018-08-13T05:39:20.519Z","layout":"post","photos":[],"link":"","_id":"cjpf91v4u000v0iv1j7szfimn","content":"<h3 id=\"部署准备\"><a href=\"#部署准备\" class=\"headerlink\" title=\"部署准备\"></a>部署准备</h3><h4 id=\"连接server\"><a href=\"#连接server\" class=\"headerlink\" title=\"连接server\"></a>连接server</h4><p>Windows环境 xshell + winscp<br>Ubuntu环境 ssh + filezilla<br>安装SSH</p>\n<pre><code>sudo apt-get install openssh-server\n</code></pre><p>安装好后查看SSH是否启动 </p>\n<pre><code>sudo ps -e |grep ssh\n</code></pre><p>有sshd,说明ssh服务已经启动，如果没有启动，输入”sudo service ssh start“</p>\n<p>连接服务器</p>\n<pre><code>ssh user@host  如：ssh root@192.168.0.111\n</code></pre><h4 id=\"Ubuntu-server环境搭建\"><a href=\"#Ubuntu-server环境搭建\" class=\"headerlink\" title=\"Ubuntu server环境搭建\"></a>Ubuntu server环境搭建</h4><h5 id=\"node-js源码安装\"><a href=\"#node-js源码安装\" class=\"headerlink\" title=\"node.js源码安装\"></a>node.js源码安装</h5><pre><code>cd /home\nwget https://nodejs.org/dist/v9.9.0/node-v9.9.0.tar.gz\ntar -xvf node-v9.9.0.tar.gz\ncd node-v9.9.0\n./configure\nsudo make &amp; make install\n</code></pre><blockquote>\n<p>对于Ubuntu 16.04.1服务器，默认的Python版本是3.5，默认情况下不安装Python 2.7，甚至没有python可执行文件</p>\n</blockquote>\n<p>./configure 会出现报错</p>\n<pre><code>./configure: 4: exec: python: not found\n</code></pre><p>安装依赖</p>\n<blockquote>\n<p><a href=\"https://askubuntu.com/questions/101591/how-do-i-install-the-latest-python-2-7-x-or-3-x-on-ubuntu\" target=\"_blank\" rel=\"noopener\">https://askubuntu.com/questions/101591/how-do-i-install-the-latest-python-2-7-x-or-3-x-on-ubuntu</a></p>\n</blockquote>\n<pre><code>sudo apt-get install build-essential checkinstall\nsudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev\n</code></pre><blockquote>\n<p>确保make、gcc、g++已经安装好，均使用apt-get的方式直接装</p>\n</blockquote>\n<p>安装python</p>\n<pre><code>sudo apt-get install python2.7\n</code></pre><h5 id=\"nginx安装\"><a href=\"#nginx安装\" class=\"headerlink\" title=\"nginx安装\"></a>nginx安装</h5><pre><code>sudo apt-get install nginx\n</code></pre><h5 id=\"hexo安装\"><a href=\"#hexo安装\" class=\"headerlink\" title=\"hexo安装\"></a>hexo安装</h5><pre><code>npm install -g hexo-cli\n</code></pre><h5 id=\"pm2安装\"><a href=\"#pm2安装\" class=\"headerlink\" title=\"pm2安装\"></a>pm2安装</h5><pre><code>npm install -g pm2\n</code></pre><h5 id=\"git-amp-github\"><a href=\"#git-amp-github\" class=\"headerlink\" title=\"git &amp; github\"></a>git &amp; github</h5><pre><code>sudo apt-get install git\n</code></pre><blockquote>\n<p>引用廖雪峰git教程</p>\n</blockquote>\n<blockquote>\n<p>自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p>\n</blockquote>\n<blockquote>\n<p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件。</p>\n</blockquote>\n<pre><code>cd ~/.ssh\nls\nid_rsa          id_rsa.pub      known_hosts\ncat id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVRgHi3gPdBcQ... youremail@example.com\n</code></pre><blockquote>\n<p>如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>\n</blockquote>\n<pre><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;\n</code></pre><blockquote>\n<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。<br>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n</blockquote>\n<blockquote>\n<p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容<br>点“Add Key”，你就应该看到已经添加的Key</p>\n</blockquote>\n<h3 id=\"网站搭建\"><a href=\"#网站搭建\" class=\"headerlink\" title=\"网站搭建\"></a>网站搭建</h3><h4 id=\"上传网站和博客至服务器\"><a href=\"#上传网站和博客至服务器\" class=\"headerlink\" title=\"上传网站和博客至服务器\"></a>上传网站和博客至服务器</h4><p>FTP or github clone</p>\n<pre><code>git clone git@github.com:recallwolf/blog\n</code></pre><h4 id=\"安装依赖启动express服务\"><a href=\"#安装依赖启动express服务\" class=\"headerlink\" title=\"安装依赖启动express服务\"></a>安装依赖启动express服务</h4><pre><code>npm install\npm2 start ./bin/www\n</code></pre><p>现在已经可以通过服务器外网ip+端口号访问网站了</p>\n<h4 id=\"hexo博客生成\"><a href=\"#hexo博客生成\" class=\"headerlink\" title=\"hexo博客生成\"></a>hexo博客生成</h4><pre><code>cd blog\nnpm install\nhexo generate\n</code></pre><p>生成public<br>更新博文上传至github后</p>\n<pre><code>cd blog\ngit pull git@github.com:recallwolf/blog\nnpm install\nhexo generate\n</code></pre><h4 id=\"nginx端口映射转发流量\"><a href=\"#nginx端口映射转发流量\" class=\"headerlink\" title=\"nginx端口映射转发流量\"></a>nginx端口映射转发流量</h4><p>配置文件位于/etc/nginx/sites-available</p>\n<pre><code>server {\n    listen 80;\n    server_name www.rwnexus.site;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000; # 端口映射\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &apos;upgrade&apos;;\n        proxy_set_header Host $server_name;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_cache_bypass $http_upgrade;\n        proxy_ssl_name $server_name;\n    }\n    location /blog {\n        alias /home/blog/public; # 静态博客入口文件目录\n        index index.html;\n    }\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n</code></pre><p>重载nginx配置文件</p>\n<pre><code>nginx -s reload\n</code></pre><p><strong>现在可以使用  <a href=\"http://www.rwnexus.site\" target=\"_blank\" rel=\"noopener\">www.rwnexus.site</a>　访问网站，<a href=\"http://www.rwnexus.site/blog\" target=\"_blank\" rel=\"noopener\">www.rwnexus.site/blog</a>　访问博客</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"部署准备\"><a href=\"#部署准备\" class=\"headerlink\" title=\"部署准备\"></a>部署准备</h3><h4 id=\"连接server\"><a href=\"#连接server\" class=\"headerlink\" title=\"连接server\"></a>连接server</h4><p>Windows环境 xshell + winscp<br>Ubuntu环境 ssh + filezilla<br>安装SSH</p>\n<pre><code>sudo apt-get install openssh-server\n</code></pre><p>安装好后查看SSH是否启动 </p>\n<pre><code>sudo ps -e |grep ssh\n</code></pre><p>有sshd,说明ssh服务已经启动，如果没有启动，输入”sudo service ssh start“</p>\n<p>连接服务器</p>\n<pre><code>ssh user@host  如：ssh root@192.168.0.111\n</code></pre><h4 id=\"Ubuntu-server环境搭建\"><a href=\"#Ubuntu-server环境搭建\" class=\"headerlink\" title=\"Ubuntu server环境搭建\"></a>Ubuntu server环境搭建</h4><h5 id=\"node-js源码安装\"><a href=\"#node-js源码安装\" class=\"headerlink\" title=\"node.js源码安装\"></a>node.js源码安装</h5><pre><code>cd /home\nwget https://nodejs.org/dist/v9.9.0/node-v9.9.0.tar.gz\ntar -xvf node-v9.9.0.tar.gz\ncd node-v9.9.0\n./configure\nsudo make &amp; make install\n</code></pre><blockquote>\n<p>对于Ubuntu 16.04.1服务器，默认的Python版本是3.5，默认情况下不安装Python 2.7，甚至没有python可执行文件</p>\n</blockquote>\n<p>./configure 会出现报错</p>\n<pre><code>./configure: 4: exec: python: not found\n</code></pre><p>安装依赖</p>\n<blockquote>\n<p><a href=\"https://askubuntu.com/questions/101591/how-do-i-install-the-latest-python-2-7-x-or-3-x-on-ubuntu\" target=\"_blank\" rel=\"noopener\">https://askubuntu.com/questions/101591/how-do-i-install-the-latest-python-2-7-x-or-3-x-on-ubuntu</a></p>\n</blockquote>\n<pre><code>sudo apt-get install build-essential checkinstall\nsudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev\n</code></pre><blockquote>\n<p>确保make、gcc、g++已经安装好，均使用apt-get的方式直接装</p>\n</blockquote>\n<p>安装python</p>\n<pre><code>sudo apt-get install python2.7\n</code></pre><h5 id=\"nginx安装\"><a href=\"#nginx安装\" class=\"headerlink\" title=\"nginx安装\"></a>nginx安装</h5><pre><code>sudo apt-get install nginx\n</code></pre><h5 id=\"hexo安装\"><a href=\"#hexo安装\" class=\"headerlink\" title=\"hexo安装\"></a>hexo安装</h5><pre><code>npm install -g hexo-cli\n</code></pre><h5 id=\"pm2安装\"><a href=\"#pm2安装\" class=\"headerlink\" title=\"pm2安装\"></a>pm2安装</h5><pre><code>npm install -g pm2\n</code></pre><h5 id=\"git-amp-github\"><a href=\"#git-amp-github\" class=\"headerlink\" title=\"git &amp; github\"></a>git &amp; github</h5><pre><code>sudo apt-get install git\n</code></pre><blockquote>\n<p>引用廖雪峰git教程</p>\n</blockquote>\n<blockquote>\n<p>自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p>\n</blockquote>\n<blockquote>\n<p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件。</p>\n</blockquote>\n<pre><code>cd ~/.ssh\nls\nid_rsa          id_rsa.pub      known_hosts\ncat id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVRgHi3gPdBcQ... youremail@example.com\n</code></pre><blockquote>\n<p>如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>\n</blockquote>\n<pre><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;\n</code></pre><blockquote>\n<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。<br>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n</blockquote>\n<blockquote>\n<p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容<br>点“Add Key”，你就应该看到已经添加的Key</p>\n</blockquote>\n<h3 id=\"网站搭建\"><a href=\"#网站搭建\" class=\"headerlink\" title=\"网站搭建\"></a>网站搭建</h3><h4 id=\"上传网站和博客至服务器\"><a href=\"#上传网站和博客至服务器\" class=\"headerlink\" title=\"上传网站和博客至服务器\"></a>上传网站和博客至服务器</h4><p>FTP or github clone</p>\n<pre><code>git clone git@github.com:recallwolf/blog\n</code></pre><h4 id=\"安装依赖启动express服务\"><a href=\"#安装依赖启动express服务\" class=\"headerlink\" title=\"安装依赖启动express服务\"></a>安装依赖启动express服务</h4><pre><code>npm install\npm2 start ./bin/www\n</code></pre><p>现在已经可以通过服务器外网ip+端口号访问网站了</p>\n<h4 id=\"hexo博客生成\"><a href=\"#hexo博客生成\" class=\"headerlink\" title=\"hexo博客生成\"></a>hexo博客生成</h4><pre><code>cd blog\nnpm install\nhexo generate\n</code></pre><p>生成public<br>更新博文上传至github后</p>\n<pre><code>cd blog\ngit pull git@github.com:recallwolf/blog\nnpm install\nhexo generate\n</code></pre><h4 id=\"nginx端口映射转发流量\"><a href=\"#nginx端口映射转发流量\" class=\"headerlink\" title=\"nginx端口映射转发流量\"></a>nginx端口映射转发流量</h4><p>配置文件位于/etc/nginx/sites-available</p>\n<pre><code>server {\n    listen 80;\n    server_name www.rwnexus.site;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000; # 端口映射\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &apos;upgrade&apos;;\n        proxy_set_header Host $server_name;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_cache_bypass $http_upgrade;\n        proxy_ssl_name $server_name;\n    }\n    location /blog {\n        alias /home/blog/public; # 静态博客入口文件目录\n        index index.html;\n    }\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n</code></pre><p>重载nginx配置文件</p>\n<pre><code>nginx -s reload\n</code></pre><p><strong>现在可以使用  <a href=\"http://www.rwnexus.site\" target=\"_blank\" rel=\"noopener\">www.rwnexus.site</a>　访问网站，<a href=\"http://www.rwnexus.site/blog\" target=\"_blank\" rel=\"noopener\">www.rwnexus.site/blog</a>　访问博客</strong></p>\n"},{"title":"常用css技巧","date":"2018-09-18T09:01:27.000Z","description":"css的一些经典技巧","_content":"\n### css创建纯三角  \n\n    #demo {\n        width: 0;\n        height: 0;\n        border-width: 20px;\n        border-style: solid;\n        border-color: transparent transparent red transparent;\n    }\n\n结果： {% asset_img triangle.png %}\n### css水平居中  \n\n   #### 1.设置宽度 添加margin: 0 auto属性  \n\n    #demo {\n        width: 50px;\n        height: 50px;\n        margin: 0 auto;\n        background-color: red;\n    }\n\n   #### 2.浮动元素居中\n\n    #demo {\n        width: 60px;\n        height: 50px;\n        margin: -25px 0 0 -30px;\n        position: relative;\n        background-color: red;\n        left: 50%;\n        right: 50%;\n    }\n\n   #### 3.绝对定位居中\n\n    #demo {\n        position: absoulte;\n        width: 50px;\n        height: 50px;\n        background-color: red;\n        margin: 0 auto;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0; \n    }\n\n   #### 4.flex弹性盒子\n\n    .container {\n        display: flex;\n        width: 70px;\n        height: 70px;\n        border-style: solid;\n        justify-content: center; /*水平居中*/\n    }\n    .demo {\n        width: 30px;\n        height: 30px;\n        background-color: red;\n    }\n\n\n### css垂直居中  \n\n   #### 1.单行文本 line-height设置和height值相等\n   #### 2.已知高度块级子元素 绝对定位+负边距\n\n    .container {\n\t\twidth: 60px;\n        position: relative;\n        height: 100px;\n        border-style: solid;\n    }\n    .demo {\n        width: 60px;\n        height: 50px;\n        position: absolute;\n        top: 50%;\n        margin-top: -25px;\n        background-color: red;\n    }\n\n   #### 3.未知高度的块级子元素居中 模拟表格布局\n   (IE6,7不兼容 父级overflow: hidden无效)\n\n        .container {\n            display: table;\n            border-style: solid;\n            width: 50px;\n            height: 50px;\n        }\n        .demo {\n            display: table-cell;\n            vertical-align: middle;\n        }\n        .cell {\n        \theight: 20px;\n            background-color: red;\n        }\n\n   #### 4.flex弹性盒子\n\n    .container {\n        display: flex;\n        width: 70px;\n        height: 70px;\n        border-style: solid;\n        justify-content: center; /*水平居中*/\n        align-items: center; /*垂直居中*/\n    }\n    .demo {\n        width: 30px;\n        height: 30px;\n        background-color: red;\n    }\n\n### 圣杯布局\n三列布局 中间主题内容前置，宽度自适应   \n两边内容定宽\n利用相对定位，浮动，负边距布局\n\ncss部分\n\n    <style>\n        .container {\n            padding-left: 190px;\n            padding-right: 190px;\n        }\n        .main {\n            float: left;\n            min-height: 130px;\n            width: 100%;\n            background-color: yellow;\n        }\n        .left {\n            float: left;\n            width: 190px;\n            min-height: 130px;\n            position: relative;\n            left: -190px;\n            margin-left: -100%;\n            background-color: red;\n        }\n        .right {\n            float: left;\n            width: 190px;\n            min-height: 130px;\n            margin-left: -190px;\n            position: relative;;\n            right: -190px;\n            background-color: blue;\n        }\n\t</style>\n\ndom结构\n\n    <div class=\"container\">\n        <div class=\"main\"></div>\n        <div class=\"left\"></div>\n        <div class=\"right\"></div>\n\t</div>\n\n结果：{% asset_img grail.png %}\n\n### 双飞翼布局\n对圣杯布局的改进，消除相对定位布局  \n主体元素上设置左右边距，预留两翼位置。左右两栏使用浮动和负边距归位，消除相对定位。\n\ncss部分\n\n    <style>\n        .container {\n            width: 100%;\n            float: left;\n        }\n        .main {\n            margin-left: 190px;\n            margin-right: 190px;\n            min-height: 130px;\n            background-color: yellow;\n        }\n        .left {\n            float: left;\n            width: 190px;\n            min-height: 130px;\n            margin-left: -100%;\n            min-height: 130px;\n            background-color: red;\n        }\n        .right {\n            float: left;\n            width: 190px;\n            min-height: 130px;\n            margin-left: -190px;\n            min-height: 130px;\n            background-color: blue;\n        }\n    </style>\n\ndom结构\n\n    <div class=\"container\">\n\t\t<div class=\"main\"></div>\n\t</div>\n\t<div class=\"left\"></div>\n\t<div class=\"right\"></div>\n\n结果：{% asset_img wings.png %}","source":"_posts/常用css布局.md","raw":"---\ntitle: 常用css技巧\ndate: 2018-09-18 17:01:27\ncategories: CSS\ntags: CSS\ndescription: css的一些经典技巧\n---\n\n### css创建纯三角  \n\n    #demo {\n        width: 0;\n        height: 0;\n        border-width: 20px;\n        border-style: solid;\n        border-color: transparent transparent red transparent;\n    }\n\n结果： {% asset_img triangle.png %}\n### css水平居中  \n\n   #### 1.设置宽度 添加margin: 0 auto属性  \n\n    #demo {\n        width: 50px;\n        height: 50px;\n        margin: 0 auto;\n        background-color: red;\n    }\n\n   #### 2.浮动元素居中\n\n    #demo {\n        width: 60px;\n        height: 50px;\n        margin: -25px 0 0 -30px;\n        position: relative;\n        background-color: red;\n        left: 50%;\n        right: 50%;\n    }\n\n   #### 3.绝对定位居中\n\n    #demo {\n        position: absoulte;\n        width: 50px;\n        height: 50px;\n        background-color: red;\n        margin: 0 auto;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0; \n    }\n\n   #### 4.flex弹性盒子\n\n    .container {\n        display: flex;\n        width: 70px;\n        height: 70px;\n        border-style: solid;\n        justify-content: center; /*水平居中*/\n    }\n    .demo {\n        width: 30px;\n        height: 30px;\n        background-color: red;\n    }\n\n\n### css垂直居中  \n\n   #### 1.单行文本 line-height设置和height值相等\n   #### 2.已知高度块级子元素 绝对定位+负边距\n\n    .container {\n\t\twidth: 60px;\n        position: relative;\n        height: 100px;\n        border-style: solid;\n    }\n    .demo {\n        width: 60px;\n        height: 50px;\n        position: absolute;\n        top: 50%;\n        margin-top: -25px;\n        background-color: red;\n    }\n\n   #### 3.未知高度的块级子元素居中 模拟表格布局\n   (IE6,7不兼容 父级overflow: hidden无效)\n\n        .container {\n            display: table;\n            border-style: solid;\n            width: 50px;\n            height: 50px;\n        }\n        .demo {\n            display: table-cell;\n            vertical-align: middle;\n        }\n        .cell {\n        \theight: 20px;\n            background-color: red;\n        }\n\n   #### 4.flex弹性盒子\n\n    .container {\n        display: flex;\n        width: 70px;\n        height: 70px;\n        border-style: solid;\n        justify-content: center; /*水平居中*/\n        align-items: center; /*垂直居中*/\n    }\n    .demo {\n        width: 30px;\n        height: 30px;\n        background-color: red;\n    }\n\n### 圣杯布局\n三列布局 中间主题内容前置，宽度自适应   \n两边内容定宽\n利用相对定位，浮动，负边距布局\n\ncss部分\n\n    <style>\n        .container {\n            padding-left: 190px;\n            padding-right: 190px;\n        }\n        .main {\n            float: left;\n            min-height: 130px;\n            width: 100%;\n            background-color: yellow;\n        }\n        .left {\n            float: left;\n            width: 190px;\n            min-height: 130px;\n            position: relative;\n            left: -190px;\n            margin-left: -100%;\n            background-color: red;\n        }\n        .right {\n            float: left;\n            width: 190px;\n            min-height: 130px;\n            margin-left: -190px;\n            position: relative;;\n            right: -190px;\n            background-color: blue;\n        }\n\t</style>\n\ndom结构\n\n    <div class=\"container\">\n        <div class=\"main\"></div>\n        <div class=\"left\"></div>\n        <div class=\"right\"></div>\n\t</div>\n\n结果：{% asset_img grail.png %}\n\n### 双飞翼布局\n对圣杯布局的改进，消除相对定位布局  \n主体元素上设置左右边距，预留两翼位置。左右两栏使用浮动和负边距归位，消除相对定位。\n\ncss部分\n\n    <style>\n        .container {\n            width: 100%;\n            float: left;\n        }\n        .main {\n            margin-left: 190px;\n            margin-right: 190px;\n            min-height: 130px;\n            background-color: yellow;\n        }\n        .left {\n            float: left;\n            width: 190px;\n            min-height: 130px;\n            margin-left: -100%;\n            min-height: 130px;\n            background-color: red;\n        }\n        .right {\n            float: left;\n            width: 190px;\n            min-height: 130px;\n            margin-left: -190px;\n            min-height: 130px;\n            background-color: blue;\n        }\n    </style>\n\ndom结构\n\n    <div class=\"container\">\n\t\t<div class=\"main\"></div>\n\t</div>\n\t<div class=\"left\"></div>\n\t<div class=\"right\"></div>\n\n结果：{% asset_img wings.png %}","slug":"常用css布局","published":1,"updated":"2018-12-06T06:33:16.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpf91v4w000w0iv1yd221inh","content":"<h3 id=\"css创建纯三角\"><a href=\"#css创建纯三角\" class=\"headerlink\" title=\"css创建纯三角\"></a>css创建纯三角</h3><pre><code>#demo {\n    width: 0;\n    height: 0;\n    border-width: 20px;\n    border-style: solid;\n    border-color: transparent transparent red transparent;\n}\n</code></pre><p>结果： <img src=\"/blog/2018/09/18/常用css布局/triangle.png\"></p>\n<h3 id=\"css水平居中\"><a href=\"#css水平居中\" class=\"headerlink\" title=\"css水平居中\"></a>css水平居中</h3><h4 id=\"1-设置宽度-添加margin-0-auto属性\"><a href=\"#1-设置宽度-添加margin-0-auto属性\" class=\"headerlink\" title=\"1.设置宽度 添加margin: 0 auto属性\"></a>1.设置宽度 添加margin: 0 auto属性</h4><pre><code>#demo {\n    width: 50px;\n    height: 50px;\n    margin: 0 auto;\n    background-color: red;\n}\n</code></pre><h4 id=\"2-浮动元素居中\"><a href=\"#2-浮动元素居中\" class=\"headerlink\" title=\"2.浮动元素居中\"></a>2.浮动元素居中</h4><pre><code>#demo {\n    width: 60px;\n    height: 50px;\n    margin: -25px 0 0 -30px;\n    position: relative;\n    background-color: red;\n    left: 50%;\n    right: 50%;\n}\n</code></pre><h4 id=\"3-绝对定位居中\"><a href=\"#3-绝对定位居中\" class=\"headerlink\" title=\"3.绝对定位居中\"></a>3.绝对定位居中</h4><pre><code>#demo {\n    position: absoulte;\n    width: 50px;\n    height: 50px;\n    background-color: red;\n    margin: 0 auto;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0; \n}\n</code></pre><h4 id=\"4-flex弹性盒子\"><a href=\"#4-flex弹性盒子\" class=\"headerlink\" title=\"4.flex弹性盒子\"></a>4.flex弹性盒子</h4><pre><code>.container {\n    display: flex;\n    width: 70px;\n    height: 70px;\n    border-style: solid;\n    justify-content: center; /*水平居中*/\n}\n.demo {\n    width: 30px;\n    height: 30px;\n    background-color: red;\n}\n</code></pre><h3 id=\"css垂直居中\"><a href=\"#css垂直居中\" class=\"headerlink\" title=\"css垂直居中\"></a>css垂直居中</h3><h4 id=\"1-单行文本-line-height设置和height值相等\"><a href=\"#1-单行文本-line-height设置和height值相等\" class=\"headerlink\" title=\"1.单行文本 line-height设置和height值相等\"></a>1.单行文本 line-height设置和height值相等</h4><h4 id=\"2-已知高度块级子元素-绝对定位-负边距\"><a href=\"#2-已知高度块级子元素-绝对定位-负边距\" class=\"headerlink\" title=\"2.已知高度块级子元素 绝对定位+负边距\"></a>2.已知高度块级子元素 绝对定位+负边距</h4><pre><code>.container {\n    width: 60px;\n    position: relative;\n    height: 100px;\n    border-style: solid;\n}\n.demo {\n    width: 60px;\n    height: 50px;\n    position: absolute;\n    top: 50%;\n    margin-top: -25px;\n    background-color: red;\n}\n</code></pre><h4 id=\"3-未知高度的块级子元素居中-模拟表格布局\"><a href=\"#3-未知高度的块级子元素居中-模拟表格布局\" class=\"headerlink\" title=\"3.未知高度的块级子元素居中 模拟表格布局\"></a>3.未知高度的块级子元素居中 模拟表格布局</h4><p>   (IE6,7不兼容 父级overflow: hidden无效)</p>\n<pre><code>.container {\n    display: table;\n    border-style: solid;\n    width: 50px;\n    height: 50px;\n}\n.demo {\n    display: table-cell;\n    vertical-align: middle;\n}\n.cell {\n    height: 20px;\n    background-color: red;\n}\n</code></pre><h4 id=\"4-flex弹性盒子-1\"><a href=\"#4-flex弹性盒子-1\" class=\"headerlink\" title=\"4.flex弹性盒子\"></a>4.flex弹性盒子</h4><pre><code>.container {\n    display: flex;\n    width: 70px;\n    height: 70px;\n    border-style: solid;\n    justify-content: center; /*水平居中*/\n    align-items: center; /*垂直居中*/\n}\n.demo {\n    width: 30px;\n    height: 30px;\n    background-color: red;\n}\n</code></pre><h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><p>三列布局 中间主题内容前置，宽度自适应<br>两边内容定宽<br>利用相对定位，浮动，负边距布局</p>\n<p>css部分</p>\n<pre><code>&lt;style&gt;\n    .container {\n        padding-left: 190px;\n        padding-right: 190px;\n    }\n    .main {\n        float: left;\n        min-height: 130px;\n        width: 100%;\n        background-color: yellow;\n    }\n    .left {\n        float: left;\n        width: 190px;\n        min-height: 130px;\n        position: relative;\n        left: -190px;\n        margin-left: -100%;\n        background-color: red;\n    }\n    .right {\n        float: left;\n        width: 190px;\n        min-height: 130px;\n        margin-left: -190px;\n        position: relative;;\n        right: -190px;\n        background-color: blue;\n    }\n&lt;/style&gt;\n</code></pre><p>dom结构</p>\n<pre><code>&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>结果：<img src=\"/blog/2018/09/18/常用css布局/grail.png\"></p>\n<h3 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h3><p>对圣杯布局的改进，消除相对定位布局<br>主体元素上设置左右边距，预留两翼位置。左右两栏使用浮动和负边距归位，消除相对定位。</p>\n<p>css部分</p>\n<pre><code>&lt;style&gt;\n    .container {\n        width: 100%;\n        float: left;\n    }\n    .main {\n        margin-left: 190px;\n        margin-right: 190px;\n        min-height: 130px;\n        background-color: yellow;\n    }\n    .left {\n        float: left;\n        width: 190px;\n        min-height: 130px;\n        margin-left: -100%;\n        min-height: 130px;\n        background-color: red;\n    }\n    .right {\n        float: left;\n        width: 190px;\n        min-height: 130px;\n        margin-left: -190px;\n        min-height: 130px;\n        background-color: blue;\n    }\n&lt;/style&gt;\n</code></pre><p>dom结构</p>\n<pre><code>&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n</code></pre><p>结果：<img src=\"/blog/2018/09/18/常用css布局/wings.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"css创建纯三角\"><a href=\"#css创建纯三角\" class=\"headerlink\" title=\"css创建纯三角\"></a>css创建纯三角</h3><pre><code>#demo {\n    width: 0;\n    height: 0;\n    border-width: 20px;\n    border-style: solid;\n    border-color: transparent transparent red transparent;\n}\n</code></pre><p>结果： <img src=\"/blog/2018/09/18/常用css布局/triangle.png\"></p>\n<h3 id=\"css水平居中\"><a href=\"#css水平居中\" class=\"headerlink\" title=\"css水平居中\"></a>css水平居中</h3><h4 id=\"1-设置宽度-添加margin-0-auto属性\"><a href=\"#1-设置宽度-添加margin-0-auto属性\" class=\"headerlink\" title=\"1.设置宽度 添加margin: 0 auto属性\"></a>1.设置宽度 添加margin: 0 auto属性</h4><pre><code>#demo {\n    width: 50px;\n    height: 50px;\n    margin: 0 auto;\n    background-color: red;\n}\n</code></pre><h4 id=\"2-浮动元素居中\"><a href=\"#2-浮动元素居中\" class=\"headerlink\" title=\"2.浮动元素居中\"></a>2.浮动元素居中</h4><pre><code>#demo {\n    width: 60px;\n    height: 50px;\n    margin: -25px 0 0 -30px;\n    position: relative;\n    background-color: red;\n    left: 50%;\n    right: 50%;\n}\n</code></pre><h4 id=\"3-绝对定位居中\"><a href=\"#3-绝对定位居中\" class=\"headerlink\" title=\"3.绝对定位居中\"></a>3.绝对定位居中</h4><pre><code>#demo {\n    position: absoulte;\n    width: 50px;\n    height: 50px;\n    background-color: red;\n    margin: 0 auto;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0; \n}\n</code></pre><h4 id=\"4-flex弹性盒子\"><a href=\"#4-flex弹性盒子\" class=\"headerlink\" title=\"4.flex弹性盒子\"></a>4.flex弹性盒子</h4><pre><code>.container {\n    display: flex;\n    width: 70px;\n    height: 70px;\n    border-style: solid;\n    justify-content: center; /*水平居中*/\n}\n.demo {\n    width: 30px;\n    height: 30px;\n    background-color: red;\n}\n</code></pre><h3 id=\"css垂直居中\"><a href=\"#css垂直居中\" class=\"headerlink\" title=\"css垂直居中\"></a>css垂直居中</h3><h4 id=\"1-单行文本-line-height设置和height值相等\"><a href=\"#1-单行文本-line-height设置和height值相等\" class=\"headerlink\" title=\"1.单行文本 line-height设置和height值相等\"></a>1.单行文本 line-height设置和height值相等</h4><h4 id=\"2-已知高度块级子元素-绝对定位-负边距\"><a href=\"#2-已知高度块级子元素-绝对定位-负边距\" class=\"headerlink\" title=\"2.已知高度块级子元素 绝对定位+负边距\"></a>2.已知高度块级子元素 绝对定位+负边距</h4><pre><code>.container {\n    width: 60px;\n    position: relative;\n    height: 100px;\n    border-style: solid;\n}\n.demo {\n    width: 60px;\n    height: 50px;\n    position: absolute;\n    top: 50%;\n    margin-top: -25px;\n    background-color: red;\n}\n</code></pre><h4 id=\"3-未知高度的块级子元素居中-模拟表格布局\"><a href=\"#3-未知高度的块级子元素居中-模拟表格布局\" class=\"headerlink\" title=\"3.未知高度的块级子元素居中 模拟表格布局\"></a>3.未知高度的块级子元素居中 模拟表格布局</h4><p>   (IE6,7不兼容 父级overflow: hidden无效)</p>\n<pre><code>.container {\n    display: table;\n    border-style: solid;\n    width: 50px;\n    height: 50px;\n}\n.demo {\n    display: table-cell;\n    vertical-align: middle;\n}\n.cell {\n    height: 20px;\n    background-color: red;\n}\n</code></pre><h4 id=\"4-flex弹性盒子-1\"><a href=\"#4-flex弹性盒子-1\" class=\"headerlink\" title=\"4.flex弹性盒子\"></a>4.flex弹性盒子</h4><pre><code>.container {\n    display: flex;\n    width: 70px;\n    height: 70px;\n    border-style: solid;\n    justify-content: center; /*水平居中*/\n    align-items: center; /*垂直居中*/\n}\n.demo {\n    width: 30px;\n    height: 30px;\n    background-color: red;\n}\n</code></pre><h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><p>三列布局 中间主题内容前置，宽度自适应<br>两边内容定宽<br>利用相对定位，浮动，负边距布局</p>\n<p>css部分</p>\n<pre><code>&lt;style&gt;\n    .container {\n        padding-left: 190px;\n        padding-right: 190px;\n    }\n    .main {\n        float: left;\n        min-height: 130px;\n        width: 100%;\n        background-color: yellow;\n    }\n    .left {\n        float: left;\n        width: 190px;\n        min-height: 130px;\n        position: relative;\n        left: -190px;\n        margin-left: -100%;\n        background-color: red;\n    }\n    .right {\n        float: left;\n        width: 190px;\n        min-height: 130px;\n        margin-left: -190px;\n        position: relative;;\n        right: -190px;\n        background-color: blue;\n    }\n&lt;/style&gt;\n</code></pre><p>dom结构</p>\n<pre><code>&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>结果：<img src=\"/blog/2018/09/18/常用css布局/grail.png\"></p>\n<h3 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h3><p>对圣杯布局的改进，消除相对定位布局<br>主体元素上设置左右边距，预留两翼位置。左右两栏使用浮动和负边距归位，消除相对定位。</p>\n<p>css部分</p>\n<pre><code>&lt;style&gt;\n    .container {\n        width: 100%;\n        float: left;\n    }\n    .main {\n        margin-left: 190px;\n        margin-right: 190px;\n        min-height: 130px;\n        background-color: yellow;\n    }\n    .left {\n        float: left;\n        width: 190px;\n        min-height: 130px;\n        margin-left: -100%;\n        min-height: 130px;\n        background-color: red;\n    }\n    .right {\n        float: left;\n        width: 190px;\n        min-height: 130px;\n        margin-left: -190px;\n        min-height: 130px;\n        background-color: blue;\n    }\n&lt;/style&gt;\n</code></pre><p>dom结构</p>\n<pre><code>&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n</code></pre><p>结果：<img src=\"/blog/2018/09/18/常用css布局/wings.png\"></p>\n"},{"title":"个人网站2.0的总结","date":"2018-03-22T16:00:00.000Z","comments":0,"description":"写下这篇文章的目的就是记录这一年的网站开发历程，反思这一段时间学习中的不足，以及对未来学习开发的规划。","_content":"从2017年三月份自学前端也已经有一年了，个人网站也已经迭代到2.0版本。折腾了不少东西，不过幸运的是坚持下来了，这也是我除了打游戏以外坚持最久的事。写下这篇文章的目的就是记录这一年的网站开发历程，反思这一段时间学习中的不足，以及对未来学习开发的规划。\n\n### 建站初衷\n被动成为互联网消费终端的消费者，这让我感到很难受，我一直希望我自己能为互联网产出而不是消费互联网。（虽然现在的产出很垃圾）  \n偶然接触到前端，对网页开发感到兴趣。  \n希望在互联网上能有一块不被朋友圈，微博等聒噪的环境影响的地方。\n\n#### 初版\n技术栈：javascript，html5，css3，jquery，ajax，bootstrap\n博客采用django zinnia blog的开源项目\n第一次上手开发自己的网站，甚至不知道怎么调试bug，碰到了诸如虚拟环境 Apache Python版本坑。碰到没有GUI的Ubuntu很头大。\n\n#### 2.0版本\n技术栈：javascript，html5，css3，vue2.0 使用es6语言规范开发\n博客采用了hexo静态博客开源项目 是一个无数据库博客\n开始使用es6的模块开发，组件能够复用。vue很容易上手，使用也很舒服。\n\n#### 过程\n慢慢习惯了Ubuntu的操作，即使没有GUI也能完成一定的需求。\n跟着mooc网做了几个较大的项目，vue音乐app,和饿了么spa页面。\n\n#### 反思\n对于开发停留在会用阶段，很多原理性的东西不了解。\n基础不牢固，表现在css的布局，html5的meta标签，JS的原型，this指向等。\n做项目时很多时候是按照老师的思路，并没有自己的思考，掌握的不是很扎实。\n\n#### 未来规划\n接下来的学习不会追一些新的技术，把侧重点放在基础学习中。巩固好JS html css基础。\n用jQuery和原JS写一写网页常用的特效。\n初步了解Angular或者React框架。\n尝试在项目中应用css预处理器。\n\n**静下心，忠于基础。努力成为一名合格前端工程师。**","source":"_posts/个人总结.md","raw":"---\ntitle: 个人网站2.0的总结\ndate: 2018-03-23\ncategories: Others\ntags: 个人网站\ncomments: false\ndescription: 写下这篇文章的目的就是记录这一年的网站开发历程，反思这一段时间学习中的不足，以及对未来学习开发的规划。\n---\n从2017年三月份自学前端也已经有一年了，个人网站也已经迭代到2.0版本。折腾了不少东西，不过幸运的是坚持下来了，这也是我除了打游戏以外坚持最久的事。写下这篇文章的目的就是记录这一年的网站开发历程，反思这一段时间学习中的不足，以及对未来学习开发的规划。\n\n### 建站初衷\n被动成为互联网消费终端的消费者，这让我感到很难受，我一直希望我自己能为互联网产出而不是消费互联网。（虽然现在的产出很垃圾）  \n偶然接触到前端，对网页开发感到兴趣。  \n希望在互联网上能有一块不被朋友圈，微博等聒噪的环境影响的地方。\n\n#### 初版\n技术栈：javascript，html5，css3，jquery，ajax，bootstrap\n博客采用django zinnia blog的开源项目\n第一次上手开发自己的网站，甚至不知道怎么调试bug，碰到了诸如虚拟环境 Apache Python版本坑。碰到没有GUI的Ubuntu很头大。\n\n#### 2.0版本\n技术栈：javascript，html5，css3，vue2.0 使用es6语言规范开发\n博客采用了hexo静态博客开源项目 是一个无数据库博客\n开始使用es6的模块开发，组件能够复用。vue很容易上手，使用也很舒服。\n\n#### 过程\n慢慢习惯了Ubuntu的操作，即使没有GUI也能完成一定的需求。\n跟着mooc网做了几个较大的项目，vue音乐app,和饿了么spa页面。\n\n#### 反思\n对于开发停留在会用阶段，很多原理性的东西不了解。\n基础不牢固，表现在css的布局，html5的meta标签，JS的原型，this指向等。\n做项目时很多时候是按照老师的思路，并没有自己的思考，掌握的不是很扎实。\n\n#### 未来规划\n接下来的学习不会追一些新的技术，把侧重点放在基础学习中。巩固好JS html css基础。\n用jQuery和原JS写一写网页常用的特效。\n初步了解Angular或者React框架。\n尝试在项目中应用css预处理器。\n\n**静下心，忠于基础。努力成为一名合格前端工程师。**","slug":"个人总结","published":1,"updated":"2018-12-06T06:33:21.559Z","layout":"post","photos":[],"link":"","_id":"cjpf91vk3001f0iv108yf892v","content":"<p>从2017年三月份自学前端也已经有一年了，个人网站也已经迭代到2.0版本。折腾了不少东西，不过幸运的是坚持下来了，这也是我除了打游戏以外坚持最久的事。写下这篇文章的目的就是记录这一年的网站开发历程，反思这一段时间学习中的不足，以及对未来学习开发的规划。</p>\n<h3 id=\"建站初衷\"><a href=\"#建站初衷\" class=\"headerlink\" title=\"建站初衷\"></a>建站初衷</h3><p>被动成为互联网消费终端的消费者，这让我感到很难受，我一直希望我自己能为互联网产出而不是消费互联网。（虽然现在的产出很垃圾）<br>偶然接触到前端，对网页开发感到兴趣。<br>希望在互联网上能有一块不被朋友圈，微博等聒噪的环境影响的地方。</p>\n<h4 id=\"初版\"><a href=\"#初版\" class=\"headerlink\" title=\"初版\"></a>初版</h4><p>技术栈：javascript，html5，css3，jquery，ajax，bootstrap<br>博客采用django zinnia blog的开源项目<br>第一次上手开发自己的网站，甚至不知道怎么调试bug，碰到了诸如虚拟环境 Apache Python版本坑。碰到没有GUI的Ubuntu很头大。</p>\n<h4 id=\"2-0版本\"><a href=\"#2-0版本\" class=\"headerlink\" title=\"2.0版本\"></a>2.0版本</h4><p>技术栈：javascript，html5，css3，vue2.0 使用es6语言规范开发<br>博客采用了hexo静态博客开源项目 是一个无数据库博客<br>开始使用es6的模块开发，组件能够复用。vue很容易上手，使用也很舒服。</p>\n<h4 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h4><p>慢慢习惯了Ubuntu的操作，即使没有GUI也能完成一定的需求。<br>跟着mooc网做了几个较大的项目，vue音乐app,和饿了么spa页面。</p>\n<h4 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h4><p>对于开发停留在会用阶段，很多原理性的东西不了解。<br>基础不牢固，表现在css的布局，html5的meta标签，JS的原型，this指向等。<br>做项目时很多时候是按照老师的思路，并没有自己的思考，掌握的不是很扎实。</p>\n<h4 id=\"未来规划\"><a href=\"#未来规划\" class=\"headerlink\" title=\"未来规划\"></a>未来规划</h4><p>接下来的学习不会追一些新的技术，把侧重点放在基础学习中。巩固好JS html css基础。<br>用jQuery和原JS写一写网页常用的特效。<br>初步了解Angular或者React框架。<br>尝试在项目中应用css预处理器。</p>\n<p><strong>静下心，忠于基础。努力成为一名合格前端工程师。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>从2017年三月份自学前端也已经有一年了，个人网站也已经迭代到2.0版本。折腾了不少东西，不过幸运的是坚持下来了，这也是我除了打游戏以外坚持最久的事。写下这篇文章的目的就是记录这一年的网站开发历程，反思这一段时间学习中的不足，以及对未来学习开发的规划。</p>\n<h3 id=\"建站初衷\"><a href=\"#建站初衷\" class=\"headerlink\" title=\"建站初衷\"></a>建站初衷</h3><p>被动成为互联网消费终端的消费者，这让我感到很难受，我一直希望我自己能为互联网产出而不是消费互联网。（虽然现在的产出很垃圾）<br>偶然接触到前端，对网页开发感到兴趣。<br>希望在互联网上能有一块不被朋友圈，微博等聒噪的环境影响的地方。</p>\n<h4 id=\"初版\"><a href=\"#初版\" class=\"headerlink\" title=\"初版\"></a>初版</h4><p>技术栈：javascript，html5，css3，jquery，ajax，bootstrap<br>博客采用django zinnia blog的开源项目<br>第一次上手开发自己的网站，甚至不知道怎么调试bug，碰到了诸如虚拟环境 Apache Python版本坑。碰到没有GUI的Ubuntu很头大。</p>\n<h4 id=\"2-0版本\"><a href=\"#2-0版本\" class=\"headerlink\" title=\"2.0版本\"></a>2.0版本</h4><p>技术栈：javascript，html5，css3，vue2.0 使用es6语言规范开发<br>博客采用了hexo静态博客开源项目 是一个无数据库博客<br>开始使用es6的模块开发，组件能够复用。vue很容易上手，使用也很舒服。</p>\n<h4 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h4><p>慢慢习惯了Ubuntu的操作，即使没有GUI也能完成一定的需求。<br>跟着mooc网做了几个较大的项目，vue音乐app,和饿了么spa页面。</p>\n<h4 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h4><p>对于开发停留在会用阶段，很多原理性的东西不了解。<br>基础不牢固，表现在css的布局，html5的meta标签，JS的原型，this指向等。<br>做项目时很多时候是按照老师的思路，并没有自己的思考，掌握的不是很扎实。</p>\n<h4 id=\"未来规划\"><a href=\"#未来规划\" class=\"headerlink\" title=\"未来规划\"></a>未来规划</h4><p>接下来的学习不会追一些新的技术，把侧重点放在基础学习中。巩固好JS html css基础。<br>用jQuery和原JS写一写网页常用的特效。<br>初步了解Angular或者React框架。<br>尝试在项目中应用css预处理器。</p>\n<p><strong>静下心，忠于基础。努力成为一名合格前端工程师。</strong></p>\n"}],"PostAsset":[{"_id":"source/_posts/js的原型链/图2.png","slug":"图2.png","post":"cjpf91v2q00050iv1l7qwnthe","modified":1,"renderable":0},{"_id":"source/_posts/vue与react组件对比/react.png","slug":"react.png","post":"cjpf91v4k000p0iv1kkoqbl2h","modified":1,"renderable":0},{"_id":"source/_posts/js中异步，同步，回调函数和Promise/1.png","post":"cjpf91v2200010iv1qmb4whcg","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/js中异步，同步，回调函数和Promise/2.png","post":"cjpf91v2200010iv1qmb4whcg","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/js的原型链/图1.png","post":"cjpf91v2q00050iv1l7qwnthe","slug":"图1.png","modified":1,"renderable":1},{"_id":"source/_posts/js的原型链/选区1.png","post":"cjpf91v2q00050iv1l7qwnthe","slug":"选区1.png","modified":1,"renderable":1},{"_id":"source/_posts/js的原型链/选区2.png","post":"cjpf91v2q00050iv1l7qwnthe","slug":"选区2.png","modified":1,"renderable":1},{"_id":"source/_posts/nodejs和树莓派小车/car.jpg","slug":"car.jpg","post":"cjpf91v2k00020iv1pwkyqag9","modified":1,"renderable":0},{"_id":"source/_posts/nodejs和树莓派小车/index.png","slug":"index.png","post":"cjpf91v2k00020iv1pwkyqag9","modified":1,"renderable":0},{"_id":"source/_posts/nodejs和树莓派小车/pi0.jpg","slug":"pi0.jpg","post":"cjpf91v2k00020iv1pwkyqag9","modified":1,"renderable":0},{"_id":"source/_posts/nodejs和树莓派小车/sketch.jpg","slug":"sketch.jpg","post":"cjpf91v2k00020iv1pwkyqag9","modified":1,"renderable":0},{"_id":"source/_posts/nodejs和树莓派小车/terminal.png","post":"cjpf91v2k00020iv1pwkyqag9","slug":"terminal.png","modified":1,"renderable":1},{"_id":"source/_posts/常用css布局/grail.png","post":"cjpf91v4w000w0iv1yd221inh","slug":"grail.png","modified":1,"renderable":1},{"_id":"source/_posts/常用css布局/triangle.png","post":"cjpf91v4w000w0iv1yd221inh","slug":"triangle.png","modified":1,"renderable":1},{"_id":"source/_posts/常用css布局/wings.png","post":"cjpf91v4w000w0iv1yd221inh","slug":"wings.png","modified":1,"renderable":1},{"_id":"source/_posts/vue与react组件对比/vue.png","post":"cjpf91v4k000p0iv1kkoqbl2h","slug":"vue.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjpf91v2200010iv1qmb4whcg","category_id":"cjpf91v2n00030iv1vr972ibq","_id":"cjpf91v2w00090iv1gqf9vqcw"},{"post_id":"cjpf91v2k00020iv1pwkyqag9","category_id":"cjpf91v2r00060iv1oglnd0iv","_id":"cjpf91v35000c0iv1kxwxo23a"},{"post_id":"cjpf91v2q00050iv1l7qwnthe","category_id":"cjpf91v2n00030iv1vr972ibq","_id":"cjpf91v36000f0iv18wsj73u2"},{"post_id":"cjpf91v40000i0iv1yo0fzyh6","category_id":"cjpf91v2n00030iv1vr972ibq","_id":"cjpf91v4n000q0iv1ch97qioe"},{"post_id":"cjpf91v43000k0iv10agaf0vo","category_id":"cjpf91v2n00030iv1vr972ibq","_id":"cjpf91v4u000u0iv1175iwt5v"},{"post_id":"cjpf91v4k000p0iv1kkoqbl2h","category_id":"cjpf91v2n00030iv1vr972ibq","_id":"cjpf91v4y000x0iv17yylgme7"},{"post_id":"cjpf91v4t000t0iv1zt14nc5p","category_id":"cjpf91v2n00030iv1vr972ibq","_id":"cjpf91v5000110iv1tbhorhgi"},{"post_id":"cjpf91v47000n0iv1o4drvrn3","category_id":"cjpf91v4s000r0iv1k5o6a2ts","_id":"cjpf91v5000120iv16o3z2qaa"},{"post_id":"cjpf91v4u000v0iv1j7szfimn","category_id":"cjpf91v4z000z0iv1qcq02o7i","_id":"cjpf91v5200160iv149aj2ipi"},{"post_id":"cjpf91v4w000w0iv1yd221inh","category_id":"cjpf91v5100140iv1x84qa25f","_id":"cjpf91v53001a0iv1xfnern5q"},{"post_id":"cjpf91vk3001f0iv108yf892v","category_id":"cjpf91vk9001g0iv1jgyzeo77","_id":"cjpf91vkd001j0iv188qcni6z"}],"PostTag":[{"post_id":"cjpf91v2200010iv1qmb4whcg","tag_id":"cjpf91v2p00040iv1j7w7jo7s","_id":"cjpf91v2s00080iv1aqet3t6t"},{"post_id":"cjpf91v2k00020iv1pwkyqag9","tag_id":"cjpf91v2s00070iv1mip5uahu","_id":"cjpf91v36000e0iv10xj3jjbr"},{"post_id":"cjpf91v2k00020iv1pwkyqag9","tag_id":"cjpf91v2x000b0iv10hzsnhjf","_id":"cjpf91v36000g0iv1oljwofvz"},{"post_id":"cjpf91v2q00050iv1l7qwnthe","tag_id":"cjpf91v2p00040iv1j7w7jo7s","_id":"cjpf91v37000h0iv1i50ifc2o"},{"post_id":"cjpf91v40000i0iv1yo0fzyh6","tag_id":"cjpf91v2p00040iv1j7w7jo7s","_id":"cjpf91v47000m0iv1l6r7j1bk"},{"post_id":"cjpf91v43000k0iv10agaf0vo","tag_id":"cjpf91v2p00040iv1j7w7jo7s","_id":"cjpf91v4j000o0iv11x1c6usk"},{"post_id":"cjpf91v47000n0iv1o4drvrn3","tag_id":"cjpf91v4s000s0iv1jpsj926c","_id":"cjpf91v4z00100iv1wxc5kpa9"},{"post_id":"cjpf91v4k000p0iv1kkoqbl2h","tag_id":"cjpf91v4s000s0iv1jpsj926c","_id":"cjpf91v5200170iv1ew4c4x2g"},{"post_id":"cjpf91v4k000p0iv1kkoqbl2h","tag_id":"cjpf91v5000130iv1ve0yeu16","_id":"cjpf91v5200180iv15n4mz0t8"},{"post_id":"cjpf91v4t000t0iv1zt14nc5p","tag_id":"cjpf91v5100150iv1alqntpd2","_id":"cjpf91v53001b0iv1f09xu7fj"},{"post_id":"cjpf91v4u000v0iv1j7szfimn","tag_id":"cjpf91v5200190iv1m7w1c5e4","_id":"cjpf91v53001d0iv1cc6ym0gm"},{"post_id":"cjpf91v4w000w0iv1yd221inh","tag_id":"cjpf91v53001c0iv1dj2fbgwm","_id":"cjpf91v54001e0iv1a8v1eija"},{"post_id":"cjpf91vk3001f0iv108yf892v","tag_id":"cjpf91vka001h0iv1jv3lwo2c","_id":"cjpf91vkc001i0iv16w1fwvcl"}],"Tag":[{"name":"JavaScript","_id":"cjpf91v2p00040iv1j7w7jo7s"},{"name":"RaspberryPi","_id":"cjpf91v2s00070iv1mip5uahu"},{"name":"Nodejs","_id":"cjpf91v2x000b0iv10hzsnhjf"},{"name":"vue","_id":"cjpf91v4s000s0iv1jpsj926c"},{"name":"react","_id":"cjpf91v5000130iv1ve0yeu16"},{"name":"算法","_id":"cjpf91v5100150iv1alqntpd2"},{"name":"Ubuntu","_id":"cjpf91v5200190iv1m7w1c5e4"},{"name":"CSS","_id":"cjpf91v53001c0iv1dj2fbgwm"},{"name":"个人网站","_id":"cjpf91vka001h0iv1jv3lwo2c"}]}}